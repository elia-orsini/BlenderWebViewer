/// <reference types="webxr" />
import { XRController } from './XRController';
export interface XREventRepresentation {
    type: string;
    target: any;
}
export interface XREvent<T extends XREventRepresentation> {
    nativeEvent: T;
    target: T['target'];
}
export declare type XRControllerEventType = Exclude<THREE.XRControllerEventType, XRSessionEventType>;
export interface XRControllerEvent {
    type: XRControllerEventType;
    target: XRController;
    data?: XRInputSource;
    fake?: boolean;
}
export declare type XREventHandler<T extends XREventRepresentation> = (event: XREvent<T>) => void;
export interface XREventOptions {
    handedness?: XRHandedness;
}
export declare function useXREvent(event: XRControllerEventType, handler: XREventHandler<XRControllerEvent>, { handedness }?: XREventOptions): void;
