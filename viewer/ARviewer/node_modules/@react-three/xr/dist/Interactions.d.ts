/// <reference types="webxr" />
import * as React from 'react';
import * as THREE from 'three';
import { XRController } from './XRController';
export interface XRInteractionEvent {
    intersection?: THREE.Intersection;
    intersections: THREE.Intersection[];
    target: XRController;
}
export declare type XRInteractionType = 'onHover' | 'onBlur' | 'onSelect' | 'onSelectEnd' | 'onSelectStart' | 'onSelectMissed' | 'onSqueeze' | 'onSqueezeEnd' | 'onSqueezeStart' | 'onSqueezeMissed' | 'onMove';
export declare type XRInteractionHandler = (event: XRInteractionEvent) => void;
export declare function InteractionManager({ children }: {
    children: React.ReactNode;
}): JSX.Element;
export declare function useInteraction(ref: React.RefObject<THREE.Object3D>, type: XRInteractionType, handler?: XRInteractionHandler): void;
export interface InteractiveProps {
    onHover?: XRInteractionHandler;
    onBlur?: XRInteractionHandler;
    onSelectStart?: XRInteractionHandler;
    onSelectEnd?: XRInteractionHandler;
    onSelectMissed?: XRInteractionHandler;
    onSelect?: XRInteractionHandler;
    onSqueezeStart?: XRInteractionHandler;
    onSqueezeEnd?: XRInteractionHandler;
    onSqueezeMissed?: XRInteractionHandler;
    onSqueeze?: XRInteractionHandler;
    onMove?: XRInteractionHandler;
    children: React.ReactNode;
}
export declare const Interactive: React.ForwardRefExoticComponent<InteractiveProps & React.RefAttributes<THREE.Group>>;
export interface RayGrabProps extends InteractiveProps {
}
export declare const RayGrab: React.ForwardRefExoticComponent<RayGrabProps & React.RefAttributes<THREE.Group>>;
export declare type HitTestCallback = (hitMatrix: THREE.Matrix4, hit: XRHitTestResult) => void;
export declare function useHitTest(hitTestCallback: HitTestCallback): void;
