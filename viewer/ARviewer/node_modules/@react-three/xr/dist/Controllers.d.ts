import * as React from 'react';
import * as THREE from 'three';
import { Object3DNode } from '@react-three/fiber';
import { XRController } from './XRController';
export interface RayProps extends Partial<JSX.IntrinsicElements['object3D']> {
    /** The XRController to attach the ray to */
    target: XRController;
    /** Whether to hide the ray on controller blur. Default is `false` */
    hideOnBlur?: boolean;
}
export declare const Ray: React.ForwardRefExoticComponent<Pick<RayProps, "target" | "type" | "children" | "name" | "attach" | "args" | "key" | "onUpdate" | "position" | "up" | "scale" | "rotation" | "matrix" | "quaternion" | "layers" | "dispose" | "id" | "uuid" | "parent" | "modelViewMatrix" | "normalMatrix" | "matrixWorld" | "matrixAutoUpdate" | "matrixWorldNeedsUpdate" | "visible" | "castShadow" | "receiveShadow" | "frustumCulled" | "renderOrder" | "animations" | "userData" | "customDepthMaterial" | "customDistanceMaterial" | "isObject3D" | "onBeforeRender" | "onAfterRender" | "applyMatrix4" | "applyQuaternion" | "setRotationFromAxisAngle" | "setRotationFromEuler" | "setRotationFromMatrix" | "setRotationFromQuaternion" | "rotateOnAxis" | "rotateOnWorldAxis" | "rotateX" | "rotateY" | "rotateZ" | "translateOnAxis" | "translateX" | "translateY" | "translateZ" | "localToWorld" | "worldToLocal" | "lookAt" | "add" | "remove" | "removeFromParent" | "clear" | "getObjectById" | "getObjectByName" | "getObjectByProperty" | "getWorldPosition" | "getWorldQuaternion" | "getWorldScale" | "getWorldDirection" | "raycast" | "traverse" | "traverseVisible" | "traverseAncestors" | "updateMatrix" | "updateMatrixWorld" | "updateWorldMatrix" | "toJSON" | "clone" | "copy" | "addEventListener" | "hasEventListener" | "removeEventListener" | "dispatchEvent" | "onClick" | "onContextMenu" | "onDoubleClick" | "onPointerUp" | "onPointerDown" | "onPointerOver" | "onPointerOut" | "onPointerEnter" | "onPointerLeave" | "onPointerMove" | "onPointerMissed" | "onPointerCancel" | "onWheel" | "hideOnBlur"> & React.RefAttributes<THREE.Line<THREE.BufferGeometry, THREE.Material | THREE.Material[]>>>;
declare class ControllerModel extends THREE.Group {
    constructor(target: XRController);
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            controllerModel: Object3DNode<ControllerModel, typeof ControllerModel>;
        }
    }
}
export interface ControllersProps {
    /** Optional material props to pass to controllers' ray indicators */
    rayMaterial?: JSX.IntrinsicElements['meshBasicMaterial'];
    /** Whether to hide controllers' rays on blur. Default is `false` */
    hideRaysOnBlur?: boolean;
}
export declare function Controllers({ rayMaterial, hideRaysOnBlur }: ControllersProps): JSX.Element;
export {};
