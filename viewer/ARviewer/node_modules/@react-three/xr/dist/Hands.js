"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const React = require("react");
const fiber = require("@react-three/fiber");
const threeStdlib = require("three-stdlib");
const XR = require("./XR.js");
function _interopNamespace(e) {
  if (e && e.__esModule)
    return e;
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespace(React);
function Hands({ modelLeft, modelRight }) {
  const controllers = XR.useXR((state) => state.controllers);
  React__namespace.useMemo(() => fiber.extend({ OculusHandModel: threeStdlib.OculusHandModel }), []);
  React__namespace.useEffect(() => {
    for (const target of controllers) {
      target.hand.dispatchEvent({ type: "connected", data: target.inputSource, fake: true });
    }
  }, [controllers, modelLeft, modelRight]);
  return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, controllers.map(({ hand }) => fiber.createPortal(/* @__PURE__ */ React__namespace.createElement("oculusHandModel", {
    args: [hand, modelLeft, modelRight]
  }), hand)));
}
exports.Hands = Hands;
//# sourceMappingURL=Hands.js.map
