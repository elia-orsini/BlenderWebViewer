import * as THREE from 'three';
import Reconciler from 'react-reconciler';
import { UseBoundStore } from 'zustand';
import { RootState } from './store';
import { EventHandlers } from './events';
export declare type Root = {
    fiber: Reconciler.FiberRoot;
    store: UseBoundStore<RootState>;
};
export declare type LocalState = {
    root: UseBoundStore<RootState>;
    objects: Instance[];
    parent: Instance | null;
    primitive?: boolean;
    eventCount: number;
    handlers: Partial<EventHandlers>;
    memoizedProps: {
        [key: string]: any;
    };
};
export declare type ClassConstructor = {
    new (): void;
};
export declare type AttachFnType = (self: Instance, parent: Instance) => void;
export declare type AttachFnsType = [attach: string | AttachFnType, detach: string | AttachFnType];
export declare type BaseInstance = Omit<THREE.Object3D, 'children' | 'attach' | 'add' | 'remove' | 'raycast'> & {
    __r3f: LocalState;
    children: Instance[];
    attach?: string;
    attachFns?: AttachFnsType;
    remove: (...object: Instance[]) => Instance;
    add: (...object: Instance[]) => Instance;
    raycast?: (raycaster: THREE.Raycaster, intersects: THREE.Intersection[]) => void;
};
export declare type Instance = BaseInstance & {
    [key: string]: any;
};
export declare type InstanceProps = {
    [key: string]: unknown;
} & {
    args?: any[];
    object?: object;
    visible?: boolean;
    dispose?: null;
    attach?: string;
};
export declare type DiffSet = {
    accumulative: boolean;
    memoized: {
        [key: string]: any;
    };
    changes: [key: string, value: unknown, isEvent: boolean, keys: string[]][];
};
export declare const isDiffSet: (def: any) => def is DiffSet;
declare let extend: (objects: object) => void;
declare function prepare<T = THREE.Object3D>(object: T, state?: Partial<LocalState>): T;
declare function createRenderer<TCanvas>(roots: Map<TCanvas, Root>): {
    reconciler: Reconciler.Reconciler<unknown, unknown, unknown, unknown, unknown>;
    applyProps: (instance: Instance, data: InstanceProps | DiffSet) => Instance;
};
export { prepare, createRenderer, extend };
