{"mappings":"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","sources":["./packages/react/popper/src/Popper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getPlacementData } from '@radix-ui/popper';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useRect } from '@radix-ui/react-use-rect';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as ArrowPrimitive from '@radix-ui/react-arrow';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\nimport type { Side, Align } from '@radix-ui/popper';\nimport type { Measurable } from '@radix-ui/rect';\n\n/* -------------------------------------------------------------------------------------------------\n * Popper\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_NAME = 'Popper';\n\ntype ScopedProps<P> = P & { __scopePopper?: Scope };\nconst [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);\n\ntype PopperContextValue = {\n  anchor: Measurable | null;\n  onAnchorChange(anchor: Measurable | null): void;\n};\nconst [PopperProvider, usePopperContext] = createPopperContext<PopperContextValue>(POPPER_NAME);\n\ninterface PopperProps {\n  children?: React.ReactNode;\n}\nconst Popper: React.FC<PopperProps> = (props: ScopedProps<PopperProps>) => {\n  const { __scopePopper, children } = props;\n  const [anchor, setAnchor] = React.useState<Measurable | null>(null);\n  return (\n    <PopperProvider scope={__scopePopper} anchor={anchor} onAnchorChange={setAnchor}>\n      {children}\n    </PopperProvider>\n  );\n};\n\nPopper.displayName = POPPER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopperAnchor';\n\ntype PopperAnchorElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface PopperAnchorProps extends PrimitiveDivProps {\n  virtualRef?: React.RefObject<Measurable>;\n}\n\nconst PopperAnchor = React.forwardRef<PopperAnchorElement, PopperAnchorProps>(\n  (props: ScopedProps<PopperAnchorProps>, forwardedRef) => {\n    const { __scopePopper, virtualRef, ...anchorProps } = props;\n    const context = usePopperContext(ANCHOR_NAME, __scopePopper);\n    const ref = React.useRef<PopperAnchorElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n\n    React.useEffect(() => {\n      // Consumer can anchor the popper to something that isn't\n      // a DOM node e.g. pointer position, so we override the\n      // `anchorRef` with their virtual ref in this case.\n      context.onAnchorChange(virtualRef?.current || ref.current);\n    });\n\n    return virtualRef ? null : <Primitive.div {...anchorProps} ref={composedRefs} />;\n  }\n);\n\nPopperAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopperContent';\n\ntype PopperContentContextValue = {\n  arrowStyles: React.CSSProperties;\n  onArrowChange(arrow: HTMLSpanElement | null): void;\n  onArrowOffsetChange(offset?: number): void;\n};\n\nconst [PopperContentProvider, useContentContext] =\n  createPopperContext<PopperContentContextValue>(CONTENT_NAME);\n\ntype PopperContentElement = React.ElementRef<typeof Primitive.div>;\ninterface PopperContentProps extends PrimitiveDivProps {\n  side?: Side;\n  sideOffset?: number;\n  align?: Align;\n  alignOffset?: number;\n  collisionTolerance?: number;\n  avoidCollisions?: boolean;\n}\n\nconst PopperContent = React.forwardRef<PopperContentElement, PopperContentProps>(\n  (props: ScopedProps<PopperContentProps>, forwardedRef) => {\n    const {\n      __scopePopper,\n      side = 'bottom',\n      sideOffset,\n      align = 'center',\n      alignOffset,\n      collisionTolerance,\n      avoidCollisions = true,\n      ...contentProps\n    } = props;\n\n    const context = usePopperContext(CONTENT_NAME, __scopePopper);\n    const [arrowOffset, setArrowOffset] = React.useState<number>();\n    const anchorRect = useRect(context.anchor);\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const contentSize = useSize(content);\n    const [arrow, setArrow] = React.useState<HTMLSpanElement | null>(null);\n    const arrowSize = useSize(arrow);\n\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n\n    const windowSize = useWindowSize();\n    const collisionBoundariesRect = windowSize\n      ? DOMRect.fromRect({ ...windowSize, x: 0, y: 0 })\n      : undefined;\n\n    const { popperStyles, arrowStyles, placedSide, placedAlign } = getPlacementData({\n      anchorRect,\n      popperSize: contentSize,\n      arrowSize,\n\n      // config\n      arrowOffset,\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      shouldAvoidCollisions: avoidCollisions,\n      collisionBoundariesRect,\n      collisionTolerance,\n    });\n    const isPlaced = placedSide !== undefined;\n\n    return (\n      <div style={popperStyles} data-radix-popper-content-wrapper=\"\">\n        <PopperContentProvider\n          scope={__scopePopper}\n          arrowStyles={arrowStyles}\n          onArrowChange={setArrow}\n          onArrowOffsetChange={setArrowOffset}\n        >\n          <Primitive.div\n            data-side={placedSide}\n            data-align={placedAlign}\n            {...contentProps}\n            style={{\n              ...contentProps.style,\n              // if the PopperContent hasn't been placed yet (not all measurements done)\n              // we prevent animations so that users's animation don't kick in too early referring wrong sides\n              animation: !isPlaced ? 'none' : undefined,\n            }}\n            ref={composedRefs}\n          />\n        </PopperContentProvider>\n      </div>\n    );\n  }\n);\n\nPopperContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopperArrow';\n\ntype PopperArrowElement = React.ElementRef<typeof ArrowPrimitive.Root>;\ntype ArrowProps = Radix.ComponentPropsWithoutRef<typeof ArrowPrimitive.Root>;\ninterface PopperArrowProps extends ArrowProps {\n  offset?: number;\n}\n\nconst PopperArrow = React.forwardRef<PopperArrowElement, PopperArrowProps>(function PopperArrow(\n  props: ScopedProps<PopperArrowProps>,\n  forwardedRef\n) {\n  const { __scopePopper, offset, ...arrowProps } = props;\n  const context = useContentContext(ARROW_NAME, __scopePopper);\n  const { onArrowOffsetChange } = context;\n\n  // send the Arrow's offset up to Popper\n  React.useEffect(() => onArrowOffsetChange(offset), [onArrowOffsetChange, offset]);\n\n  return (\n    <span style={{ ...context.arrowStyles, pointerEvents: 'none' }}>\n      <span\n        // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n        // doesn't report size as we'd expect on SVG elements.\n        // it reports their bounding box which is effectively the largest path inside the SVG.\n        ref={context.onArrowChange}\n        style={{\n          display: 'inline-block',\n          verticalAlign: 'top',\n          pointerEvents: 'auto',\n        }}\n      >\n        <ArrowPrimitive.Root\n          {...arrowProps}\n          ref={forwardedRef}\n          style={{\n            ...arrowProps.style,\n            // ensures the element can be measured correctly (mostly for if SVG)\n            display: 'block',\n          }}\n        />\n      </span>\n    </span>\n  );\n});\n\nPopperArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS = 100;\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = React.useState<{ width: number; height: number } | undefined>(\n    undefined\n  );\n\n  React.useEffect(() => {\n    let debounceTimerId: number;\n\n    function updateWindowSize() {\n      setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    function handleResize() {\n      window.clearTimeout(debounceTimerId);\n      debounceTimerId = window.setTimeout(updateWindowSize, WINDOW_RESIZE_DEBOUNCE_WAIT_IN_MS);\n    }\n\n    updateWindowSize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowSize;\n}\n\nconst Root = Popper;\nconst Anchor = PopperAnchor;\nconst Content = PopperContent;\nconst Arrow = PopperArrow;\n\nexport {\n  createPopperScope,\n  //\n  Popper,\n  PopperAnchor,\n  PopperContent,\n  PopperArrow,\n  //\n  Root,\n  Anchor,\n  Content,\n  Arrow,\n};\nexport type { PopperProps, PopperAnchorProps, PopperContentProps, PopperArrowProps };\n"],"names":["createPopperContext","createPopperScope","createContextScope","PopperProvider","usePopperContext","Popper","props","__scopePopper","children","anchor","setAnchor","React","useState","_react","createElement","$d4fb2a15a6483a4f85af0f96fd68687d$var$PopperProvider","scope","onAnchorChange","PopperAnchor","forwardRef","forwardedRef","virtualRef","anchorProps","context","ref","useRef","composedRefs","useComposedRefs","useEffect","current","Primitive","div","_babelRuntimeHelpersEsmExtends","PopperContentProvider","useContentContext","PopperContent","side","sideOffset","align","alignOffset","collisionTolerance","avoidCollisions","contentProps","arrowOffset","setArrowOffset","anchorRect","useRect","content","setContent","contentSize","useSize","arrow","setArrow","arrowSize","node","windowSize","setWindowSize","undefined","debounceTimerId","updateWindowSize","width","window","innerWidth","height","innerHeight","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","useWindowSize","collisionBoundariesRect","DOMRect","fromRect","x","y","popperStyles","arrowStyles","placedSide","placedAlign","getPlacementData","popperSize","shouldAvoidCollisions","isPlaced","style","$d4fb2a15a6483a4f85af0f96fd68687d$var$PopperContentProvider","onArrowChange","onArrowOffsetChange","animation","PopperArrow","offset","arrowProps","pointerEvents","display","verticalAlign","_radixUiReactArrow","Root","Anchor","Content","Arrow"],"version":3,"file":"index.module.js.map"}