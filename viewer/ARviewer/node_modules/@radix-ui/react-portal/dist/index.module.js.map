{"mappings":"oOAqBA,MAAMA,oBAASC,EAAMC,YAAuC,CAACC,EAAOC,KAAiB,IAAAC,EAAAC,EACnF,MAAMC,aAAEA,EAAFC,MAAgBA,KAAUC,GAAgBN,EAC1CO,EAAW,QAAAL,EAAGE,MAAAA,OAAH,EAAGA,EAAcI,eAAjB,IAAAN,EAAAA,EAAA,OAA4BO,iBAA5B,IAA4BA,YAA5B,QAAAN,EAA4BM,WAAYC,gBAAxC,IAAAP,OAAA,EAA4BA,EAAsBQ,MAC7D,CAAGC,GAAed,EAAMe,SAAS,IAUvC,OAJAC,GAAgB,KACdF,EAAY,MACX,IAECL,eACKQ,EAASC,0BACdC,EAAAC,cAACC,EAAUC,IAAXC,EAAA,CACE,oBAAkB,IACdf,EAFN,CAGEgB,IAAKrB,EACLI,MAOEE,IAAgBG,SAASC,KACrB,CACEY,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OA7CI,cA8CDrB,QAELsB,KAGRpB,GAKG,4BAgBT,MAAMqB,4BAAiB9B,EAAMC,YAC3B,CAACC,EAAOC,KAAiB,IAAA4B,EACvB,MAAMC,UAAEA,GAAS,OAAGrB,iBAAH,IAAGA,YAAH,QAAAoB,EAAGpB,WAAYC,gBAAf,IAAAmB,OAAA,EAAGA,EAAsBlB,SAASL,GAAgBN,EACnE,OAAO8B,eACHf,EAASC,0BAAaC,EAAAC,cAACC,EAAUC,IAAXC,EAAA,GAAmBf,EAAnB,CAAgCgB,IAAKrB,KAAkB6B,GAC7E,4BAQR,MAAMC,KAAOlC","sources":["./packages/react/portal/src/Portal.tsx"],"sourcesContent":["import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\nconst MAX_Z_INDEX = 2147483647;\n\n/* -------------------------------------------------------------------------------------------------\n * Portal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'Portal';\n\ntype PortalElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface PortalProps extends PrimitiveDivProps {\n  containerRef?: React.RefObject<HTMLElement>;\n}\n\nconst Portal = React.forwardRef<PortalElement, PortalProps>((props, forwardedRef) => {\n  const { containerRef, style, ...portalProps } = props;\n  const hostElement = containerRef?.current ?? globalThis?.document?.body;\n  const [, forceUpdate] = React.useState({});\n\n  /**\n   * containerRef.current won't be set on first render, so we force a re-render.\n   * Because we do this in `useLayoutEffect`, we still avoid a flash.\n   */\n  useLayoutEffect(() => {\n    forceUpdate({});\n  }, []);\n\n  if (hostElement) {\n    return ReactDOM.createPortal(\n      <Primitive.div\n        data-radix-portal=\"\"\n        {...portalProps}\n        ref={forwardedRef}\n        style={\n          /**\n           * If the Portal is injected in `body`, we assume we want whatever is portalled\n           * to appear on top of everything. Ideally this would be handled by making sure the\n           * app root creates a new stacking context, however this is quite hard to automate.\n           * For this reason, we have opted for setting the max z-index on the portal itself.\n           */\n          hostElement === document.body\n            ? {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                zIndex: MAX_Z_INDEX,\n                ...style,\n              }\n            : undefined\n        }\n      />,\n      hostElement\n    );\n  }\n\n  // bail out of ssr\n  return null;\n});\n\nPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * UnstablePortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst UNSTABLE_PORTAL_NAME = 'Portal';\n\ntype UnstablePortalElement = React.ElementRef<typeof Primitive.div>;\ninterface UnstablePortalProps extends PrimitiveDivProps {\n  container?: HTMLElement | null;\n}\n\nconst UnstablePortal = React.forwardRef<UnstablePortalElement, UnstablePortalProps>(\n  (props, forwardedRef) => {\n    const { container = globalThis?.document?.body, ...portalProps } = props;\n    return container\n      ? ReactDOM.createPortal(<Primitive.div {...portalProps} ref={forwardedRef} />, container)\n      : null;\n  }\n);\n\nUnstablePortal.displayName = UNSTABLE_PORTAL_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Portal;\n\nexport {\n  Portal,\n  UnstablePortal,\n  //\n  Root,\n};\nexport type { PortalProps, UnstablePortalProps };\n"],"names":["Portal","React","forwardRef","props","forwardedRef","_containerRef$current","_globalThis$document","containerRef","style","portalProps","hostElement","current","globalThis","document","body","forceUpdate","useState","useLayoutEffect","ReactDOM","createPortal","_react","createElement","Primitive","div","_babelRuntimeHelpersEsmExtends","ref","position","top","left","zIndex","undefined","UnstablePortal","_globalThis$document2","container","Root"],"version":3,"file":"index.module.js.map"}