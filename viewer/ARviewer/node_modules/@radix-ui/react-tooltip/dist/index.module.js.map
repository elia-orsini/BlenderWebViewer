{"mappings":"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","sources":["./packages/react/tooltip/src/Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useRect } from '@radix-ui/react-use-rect';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Slottable } from '@radix-ui/react-slot';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P = {}> = P & { __scopeTooltip?: Scope };\nconst [createTooltipContext, createTooltipScope] = createContextScope('Tooltip', [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipProvider\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROVIDER_NAME = 'TooltipProvider';\nconst DEFAULT_DELAY_DURATION = 700;\nconst TOOLTIP_OPEN = 'tooltip.open';\n\ntype TooltipProviderContextValue = {\n  isOpenDelayed: boolean;\n  delayDuration: number;\n  onOpen(): void;\n  onClose(): void;\n};\n\nconst [TooltipProviderContextProvider, useTooltipProviderContext] =\n  createTooltipContext<TooltipProviderContextValue>(PROVIDER_NAME, {\n    isOpenDelayed: true,\n    delayDuration: DEFAULT_DELAY_DURATION,\n    onOpen: () => {},\n    onClose: () => {},\n  });\n\ninterface TooltipProviderProps {\n  /**\n   * The duration from when the mouse enters the trigger until the tooltip gets opened.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n  children: React.ReactNode;\n}\n\nconst TooltipProvider: React.FC<TooltipProviderProps> = (\n  props: ScopedProps<TooltipProviderProps>\n) => {\n  const {\n    __scopeTooltip,\n    delayDuration = DEFAULT_DELAY_DURATION,\n    skipDelayDuration = 300,\n    children,\n  } = props;\n  const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n  const skipDelayTimerRef = React.useRef(0);\n\n  React.useEffect(() => {\n    const skipDelayTimer = skipDelayTimerRef.current;\n    return () => window.clearTimeout(skipDelayTimer);\n  }, []);\n\n  return (\n    <TooltipProviderContextProvider\n      scope={__scopeTooltip}\n      isOpenDelayed={isOpenDelayed}\n      delayDuration={delayDuration}\n      onOpen={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        setIsOpenDelayed(false);\n      }, [])}\n      onClose={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(\n          () => setIsOpenDelayed(true),\n          skipDelayDuration\n        );\n      }, [skipDelayDuration])}\n    >\n      {children}\n    </TooltipProviderContextProvider>\n  );\n};\n\nTooltipProvider.displayName = PROVIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLTIP_NAME = 'Tooltip';\n\ntype TooltipContextValue = {\n  contentId: string;\n  open: boolean;\n  stateAttribute: 'closed' | 'delayed-open' | 'instant-open';\n  trigger: TooltipTriggerElement | null;\n  onTriggerChange(trigger: TooltipTriggerElement | null): void;\n  onTriggerEnter(): void;\n  onOpen(): void;\n  onClose(): void;\n};\n\nconst [TooltipContextProvider, useTooltipContext] =\n  createTooltipContext<TooltipContextValue>(TOOLTIP_NAME);\n\ninterface TooltipProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n\n  /**\n   * The duration from when the mouse enters the trigger until the tooltip gets opened. This will\n   * override the prop with the same name passed to Provider.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  children?: React.ReactNode;\n}\n\nconst Tooltip: React.FC<TooltipProps> = (props: ScopedProps<TooltipProps>) => {\n  const {\n    __scopeTooltip,\n    children,\n    open: openProp,\n    defaultOpen = false,\n    onOpenChange,\n    delayDuration: delayDurationProp,\n  } = props;\n  const context = useTooltipProviderContext(TOOLTIP_NAME, __scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const [trigger, setTrigger] = React.useState<HTMLButtonElement | null>(null);\n  const contentId = useId();\n  const openTimerRef = React.useRef(0);\n  const delayDuration = delayDurationProp ?? context.delayDuration;\n  const wasOpenDelayedRef = React.useRef(false);\n  const { onOpen, onClose } = context;\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: (open) => {\n      if (open) {\n        // we dispatch here so `TooltipProvider` isn't required to\n        // ensure other tooltips are aware of this one opening.\n        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n        onOpen();\n      }\n      onOpenChange?.(open);\n    },\n  });\n  const stateAttribute = React.useMemo(() => {\n    return open ? (wasOpenDelayedRef.current ? 'delayed-open' : 'instant-open') : 'closed';\n  }, [open]);\n\n  const handleOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    wasOpenDelayedRef.current = false;\n    setOpen(true);\n  }, [setOpen]);\n\n  const handleDelayedOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => {\n      wasOpenDelayedRef.current = true;\n      setOpen(true);\n    }, delayDuration);\n  }, [delayDuration, setOpen]);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(openTimerRef.current);\n  }, []);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <TooltipContextProvider\n        scope={__scopeTooltip}\n        contentId={contentId}\n        open={open}\n        stateAttribute={stateAttribute}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        onTriggerEnter={React.useCallback(() => {\n          if (context.isOpenDelayed) handleDelayedOpen();\n          else handleOpen();\n        }, [context.isOpenDelayed, handleDelayedOpen, handleOpen])}\n        onOpen={React.useCallback(handleOpen, [handleOpen])}\n        onClose={React.useCallback(() => {\n          window.clearTimeout(openTimerRef.current);\n          setOpen(false);\n          onClose();\n        }, [setOpen, onClose])}\n      >\n        {children}\n      </TooltipContextProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nTooltip.displayName = TOOLTIP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'TooltipTrigger';\n\ntype TooltipTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface TooltipTriggerProps extends PrimitiveButtonProps {}\n\nconst TooltipTrigger = React.forwardRef<TooltipTriggerElement, TooltipTriggerProps>(\n  (props: ScopedProps<TooltipTriggerProps>, forwardedRef) => {\n    const { __scopeTooltip, ...triggerProps } = props;\n    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const isMouseDownRef = React.useRef(false);\n    const handleMouseUp = React.useCallback(() => (isMouseDownRef.current = false), []);\n\n    React.useEffect(() => {\n      return () => document.removeEventListener('mouseup', handleMouseUp);\n    }, [handleMouseUp]);\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          // We purposefully avoid adding `type=button` here because tooltip triggers are also\n          // commonly anchors and the anchor `type` attribute signifies MIME type.\n          aria-describedby={context.open ? context.contentId : undefined}\n          data-state={context.stateAttribute}\n          {...triggerProps}\n          ref={composedTriggerRef}\n          onMouseEnter={composeEventHandlers(props.onMouseEnter, context.onTriggerEnter)}\n          onMouseLeave={composeEventHandlers(props.onMouseLeave, context.onClose)}\n          onMouseDown={composeEventHandlers(props.onMouseDown, () => {\n            context.onClose();\n            isMouseDownRef.current = true;\n            document.addEventListener('mouseup', handleMouseUp, { once: true });\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => {\n            if (!isMouseDownRef.current) context.onOpen();\n          })}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // Handle anything that the browser considers a click for the element type if\n          // not using pointer e.g. Space keyup and Enter keydown\n          onClick={composeEventHandlers(props.onClick, context.onClose)}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nTooltipTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'TooltipContent';\n\ntype TooltipContentElement = TooltipContentImplElement;\ninterface TooltipContentProps extends TooltipContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipContent = React.forwardRef<TooltipContentElement, TooltipContentProps>(\n  (props: ScopedProps<TooltipContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n    return (\n      <Presence present={forceMount || context.open}>\n        <TooltipContentImpl ref={forwardedRef} {...contentProps} />\n      </Presence>\n    );\n  }\n);\n\ntype TooltipContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface TooltipContentImplProps extends PopperContentProps {\n  /**\n   * A more descriptive label for accessibility purpose\n   */\n  'aria-label'?: string;\n\n  /**\n   * Whether the Tooltip should render in a Portal\n   * (default: `true`)\n   */\n  portalled?: boolean;\n}\n\nconst TooltipContentImpl = React.forwardRef<TooltipContentImplElement, TooltipContentImplProps>(\n  (props: ScopedProps<TooltipContentImplProps>, forwardedRef) => {\n    const {\n      __scopeTooltip,\n      children,\n      'aria-label': ariaLabel,\n      portalled = true,\n      ...contentProps\n    } = props;\n    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const PortalWrapper = portalled ? Portal : React.Fragment;\n    const { onClose } = context;\n\n    useEscapeKeydown(() => onClose());\n\n    React.useEffect(() => {\n      // Close this tooltip if another one opens\n      document.addEventListener(TOOLTIP_OPEN, onClose);\n      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);\n    }, [onClose]);\n\n    return (\n      <PortalWrapper>\n        <CheckTriggerMoved __scopeTooltip={__scopeTooltip} />\n        <PopperPrimitive.Content\n          data-state={context.stateAttribute}\n          {...popperScope}\n          {...contentProps}\n          ref={forwardedRef}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom property\n            ['--radix-tooltip-content-transform-origin' as any]:\n              'var(--radix-popper-transform-origin)',\n          }}\n        >\n          <Slottable>{children}</Slottable>\n          <VisuallyHiddenPrimitive.Root id={context.contentId} role=\"tooltip\">\n            {ariaLabel || children}\n          </VisuallyHiddenPrimitive.Root>\n        </PopperPrimitive.Content>\n      </PortalWrapper>\n    );\n  }\n);\n\nTooltipContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'TooltipArrow';\n\ntype TooltipArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface TooltipArrowProps extends PopperArrowProps {}\n\nconst TooltipArrow = React.forwardRef<TooltipArrowElement, TooltipArrowProps>(\n  (props: ScopedProps<TooltipArrowProps>, forwardedRef) => {\n    const { __scopeTooltip, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeTooltip);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nTooltipArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction CheckTriggerMoved(props: ScopedProps<{}>) {\n  const { __scopeTooltip } = props;\n  const context = useTooltipContext('CheckTriggerMoved', __scopeTooltip);\n\n  const triggerRect = useRect(context.trigger);\n  const triggerLeft = triggerRect?.left;\n  const previousTriggerLeft = usePrevious(triggerLeft);\n  const triggerTop = triggerRect?.top;\n  const previousTriggerTop = usePrevious(triggerTop);\n  const handleClose = context.onClose;\n\n  React.useEffect(() => {\n    // checking if the user has scrolled…\n    const hasTriggerMoved =\n      (previousTriggerLeft !== undefined && previousTriggerLeft !== triggerLeft) ||\n      (previousTriggerTop !== undefined && previousTriggerTop !== triggerTop);\n\n    if (hasTriggerMoved) {\n      handleClose();\n    }\n  }, [handleClose, previousTriggerLeft, previousTriggerTop, triggerLeft, triggerTop]);\n\n  return null;\n}\n\nconst Provider = TooltipProvider;\nconst Root = Tooltip;\nconst Trigger = TooltipTrigger;\nconst Content = TooltipContent;\nconst Arrow = TooltipArrow;\n\nexport {\n  createTooltipScope,\n  //\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipArrow,\n  //\n  Provider,\n  Root,\n  Trigger,\n  Content,\n  Arrow,\n};\nexport type { TooltipProps, TooltipTriggerProps, TooltipContentProps, TooltipArrowProps };\n"],"names":["createTooltipContext","createTooltipScope","createContextScope","createPopperScope","usePopperScope","DEFAULT_DELAY_DURATION","TooltipProviderContextProvider","useTooltipProviderContext","isOpenDelayed","delayDuration","onOpen","onClose","TooltipProvider","props","__scopeTooltip","skipDelayDuration","children","setIsOpenDelayed","React","useState","skipDelayTimerRef","useRef","useEffect","skipDelayTimer","current","window","clearTimeout","_react","createElement","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$TooltipProviderContextProvider","scope","useCallback","setTimeout","TooltipContextProvider","useTooltipContext","Tooltip","open","openProp","defaultOpen","onOpenChange","delayDurationProp","context","popperScope","trigger","setTrigger","contentId","useId","openTimerRef","wasOpenDelayedRef","setOpen","useControllableState","prop","defaultProp","onChange","document","dispatchEvent","CustomEvent","stateAttribute","useMemo","handleOpen","handleDelayedOpen","_radixUiReactPopper","Root","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$TooltipContextProvider","onTriggerChange","onTriggerEnter","TooltipTrigger","forwardRef","forwardedRef","triggerProps","composedTriggerRef","useComposedRefs","isMouseDownRef","handleMouseUp","removeEventListener","Anchor","_babelRuntimeHelpersEsmExtends","asChild","Primitive","button","undefined","ref","onMouseEnter","composeEventHandlers","onMouseLeave","onMouseDown","addEventListener","once","onFocus","onBlur","onClick","TooltipContent","forceMount","contentProps","Presence","present","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$TooltipContentImpl","TooltipContentImpl","ariaLabel","portalled","PortalWrapper","Portal","Fragment","useEscapeKeydown","$badf5d6f88b7e9fa4e0bb85d71c0396a$var$CheckTriggerMoved","Content","style","Slottable","_radixUiReactVisuallyHidden","id","role","TooltipArrow","arrowProps","Arrow","CheckTriggerMoved","triggerRect","useRect","triggerLeft","left","previousTriggerLeft","usePrevious","triggerTop","top","previousTriggerTop","handleClose","Provider","Trigger"],"version":3,"file":"index.module.js.map"}