{"mappings":"iGAWA,SAASA,sBAAwBC,KAC/BA,EAD+BC,YAE/BA,EAF+BC,SAG/BA,EAAW,WAEX,MAAOC,EAAkBC,GAqB3B,UAAiCH,YAC/BA,EAD+BC,SAE/BA,IAEA,MAAMG,EAAoBC,EAAMC,SAAwBN,IACjDO,GAASH,EACVI,EAAeH,EAAMI,OAAOF,GAC5BG,EAAeC,EAAeV,GASpC,OAPAI,EAAMO,WAAU,KACVJ,EAAaK,UAAYN,IAC3BG,EAAaH,GACbC,EAAaK,QAAUN,KAExB,CAACA,EAAOC,EAAcE,IAElBN,EArCyCU,CAAqB,CAAEd,YAAAA,EAAaC,SAAAA,IAC9Ec,OAAwBC,IAATjB,EACfQ,EAAQQ,EAAehB,EAAOG,EAC9BQ,EAAeC,EAAeV,GAepC,MAAO,CAACM,EAb8DF,EAAMY,aACzEC,IACC,GAAIH,EAAc,CAChB,MAAMI,EAASD,EACTX,EAA6B,mBAAdW,EAA2BC,EAAOpB,GAAQmB,EAC3DX,IAAUR,GAAMW,EAAaH,QAEjCJ,EAAoBe,KAGxB,CAACH,EAAchB,EAAMI,EAAqBO","sources":["./packages/react/use-controllable-state/src/useControllableState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"],"names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","uncontrolledState","React","useState","value","prevValueRef","useRef","handleChange","useCallbackRef","useEffect","current","useUncontrolledState","isControlled","undefined","useCallback","nextValue","setter"],"version":3,"file":"index.module.js.map"}