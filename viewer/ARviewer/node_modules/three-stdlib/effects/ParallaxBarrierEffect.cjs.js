"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three");exports.ParallaxBarrierEffect=function(r){const t=new e.OrthographicCamera(-1,1,1,-1,0,1),a=new e.Scene,i=new e.StereoCamera,n={minFilter:e.LinearFilter,magFilter:e.NearestFilter,format:e.RGBAFormat},o=new e.WebGLRenderTarget(512,512,n),l=new e.WebGLRenderTarget(512,512,n),v=new e.ShaderMaterial({uniforms:{mapLeft:{value:o.texture},mapRight:{value:l.texture}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = vec2( uv.x, uv.y );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D mapLeft;","uniform sampler2D mapRight;","varying vec2 vUv;","void main() {","\tvec2 uv = vUv;","\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {","\t\tgl_FragColor = texture2D( mapLeft, uv );","\t} else {","\t\tgl_FragColor = texture2D( mapRight, uv );","\t}","}"].join("\n")}),d=new e.Mesh(new e.PlaneGeometry(2,2),v);a.add(d),this.setSize=(e,t)=>{r.setSize(e,t);const a=r.getPixelRatio();o.setSize(e*a,t*a),l.setSize(e*a,t*a)},this.render=(e,n)=>{e.updateMatrixWorld(),null===n.parent&&n.updateMatrixWorld(),i.update(n),r.setRenderTarget(o),r.clear(),r.render(e,i.cameraL),r.setRenderTarget(l),r.clear(),r.render(e,i.cameraR),r.setRenderTarget(null),r.render(a,t)}};
