"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three");exports.AnaglyphEffect=function(t,r,o){this.colorMatrixLeft=(new e.Matrix3).fromArray([.4561,-.0400822,-.0152161,.500484,-.0378246,-.0205971,.176381,-.0157589,-.00546856]),this.colorMatrixRight=(new e.Matrix3).fromArray([-.0434706,.378476,-.0721527,-.0879388,.73364,-.112961,-.00155529,-.0184503,1.2264]);const a=new e.OrthographicCamera(-1,1,1,-1,0,1),i=new e.Scene,n=new e.StereoCamera,c={minFilter:e.LinearFilter,magFilter:e.NearestFilter,format:e.RGBAFormat};void 0===r&&(r=512),void 0===o&&(o=512);const l=new e.WebGLRenderTarget(r,o,c),v=new e.WebGLRenderTarget(r,o,c),s=new e.ShaderMaterial({uniforms:{mapLeft:{value:l.texture},mapRight:{value:v.texture},colorMatrixLeft:{value:this.colorMatrixLeft},colorMatrixRight:{value:this.colorMatrixRight}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = vec2( uv.x, uv.y );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D mapLeft;","uniform sampler2D mapRight;","varying vec2 vUv;","uniform mat3 colorMatrixLeft;","uniform mat3 colorMatrixRight;","float lin( float c ) {","\treturn c <= 0.04045 ? c * 0.0773993808 :","\t\t\tpow( c * 0.9478672986 + 0.0521327014, 2.4 );","}","vec4 lin( vec4 c ) {","\treturn vec4( lin( c.r ), lin( c.g ), lin( c.b ), c.a );","}","float dev( float c ) {","\treturn c <= 0.0031308 ? c * 12.92","\t\t\t: pow( c, 0.41666 ) * 1.055 - 0.055;","}","void main() {","\tvec2 uv = vUv;","\tvec4 colorL = lin( texture2D( mapLeft, uv ) );","\tvec4 colorR = lin( texture2D( mapRight, uv ) );","\tvec3 color = clamp(","\t\t\tcolorMatrixLeft * colorL.rgb +","\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );","\tgl_FragColor = vec4(","\t\t\tdev( color.r ), dev( color.g ), dev( color.b ),","\t\t\tmax( colorL.a, colorR.a ) );","}"].join("\n")}),d=new e.Mesh(new e.PlaneGeometry(2,2),s);i.add(d),this.setSize=(e,r)=>{t.setSize(e,r);const o=t.getPixelRatio();l.setSize(e*o,r*o),v.setSize(e*o,r*o)},this.render=(e,r)=>{const o=t.getRenderTarget();e.updateMatrixWorld(),null===r.parent&&r.updateMatrixWorld(),n.update(r),t.setRenderTarget(l),t.clear(),t.render(e,n.cameraL),t.setRenderTarget(v),t.clear(),t.render(e,n.cameraR),t.setRenderTarget(null),t.render(i,a),t.setRenderTarget(o)},this.dispose=()=>{l&&l.dispose(),v&&v.dispose(),d&&d.geometry.dispose(),s&&s.dispose()}};
