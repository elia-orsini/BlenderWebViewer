"use strict";var e=require("./WebGPUNodeUniformsGroup.cjs.js"),r=require("./WebGPUNodeUniform.cjs.js"),t=require("../WebGPUSampler.cjs.js"),s=require("../WebGPUSampledTexture.cjs.js"),o=require("../../nodes/core/NodeSlot.cjs.js"),i=require("../../nodes/core/NodeBuilder.cjs.js"),n=require("../../nodes/accessors/ModelViewProjectionNode.cjs.js"),d=require("./ShaderLib.cjs.js");require("../WebGPUUniformsGroup.cjs.js"),require("../WebGPUBinding.cjs.js"),require("../constants.cjs.js"),require("../WebGPUUniform.cjs.js"),require("three"),require("../../nodes/core/NodeUniform.cjs.js"),require("../../nodes/core/NodeAttribute.cjs.js"),require("../../nodes/core/NodeVary.cjs.js"),require("../../nodes/core/constants.cjs.js"),require("../../nodes/core/Node.cjs.js"),require("../../nodes/accessors/CameraNode.cjs.js"),require("@babel/runtime/helpers/defineProperty"),require("../../nodes/inputs/Vector3Node.cjs.js"),require("../../nodes/core/InputNode.cjs.js"),require("../../nodes/inputs/Matrix4Node.cjs.js"),require("../../nodes/accessors/ModelNode.cjs.js"),require("../../nodes/inputs/Matrix3Node.cjs.js"),require("../../nodes/math/OperatorNode.cjs.js"),require("../../nodes/accessors/PositionNode.cjs.js"),require("../../nodes/core/AttributeNode.cjs.js");module.exports=class extends i{constructor(e,r){super(e,r),this.bindings={vertex:[],fragment:[]},this.bindingsOffset={vertex:0,fragment:0},this.uniformsGroup={},this.nativeShader=null,this._parseMaterial()}_parseMaterial(){const e=this.material;if(this.nativeShader=d.common,e.isMeshBasicMaterial||e.isPointsMaterial||e.isLineBasicMaterial){const r=new n;void 0!==e.positionNode&&(r.position=e.positionNode),this.addSlot("vertex",new o(r,"MVP","vec4")),void 0!==e.colorNode&&this.addSlot("fragment",new o(e.colorNode,"COLOR","vec4")),void 0!==e.opacityNode&&this.addSlot("fragment",new o(e.opacityNode,"OPACITY","float"))}}getTexture(e,r){return`texture( sampler2D( ${e}, ${e}_sampler ), ${r} )`}getPropertyName(e){if(e.isNodeUniform){const r=e.name;return"texture"===e.type?r:`nodeUniforms.${r}`}return super.getPropertyName(e)}getBindings(){const e=this.bindings;return[...e.vertex,...e.fragment]}getUniformFromNode(o,i,n){const d=super.getUniformFromNode(o,i,n),a=this.getDataFromNode(o,i);if(void 0===a.uniformGPU){let o;const u=this.bindings[i];if("texture"===n){const e=new t(`${d.name}_sampler`,d.value),r=new s.WebGPUSampledTexture(d.name,d.value),i=u[u.length-1],n=i&&i.isUniformsGroup?u.length-1:u.length;u.splice(n,0,e,r),o={sampler:e,texture:r}}else{let t=this.uniformsGroup[i];if(void 0===t&&(t=new e(i),this.uniformsGroup[i]=t,u.push(t)),"float"===n)o=new r.FloatNodeUniform(d);else if("vec2"===n)o=new r.Vector2NodeUniform(d);else if("vec3"===n)o=new r.Vector3NodeUniform(d);else if("vec4"===n)o=new r.Vector4NodeUniform(d);else if("color"===n)o=new r.ColorNodeUniform(d);else if("mat3"===n)o=new r.Matrix3NodeUniform(d);else{if("mat4"!==n)throw new Error(`Uniform "${n}" not declared.`);o=new r.Matrix4NodeUniform(d)}t.addUniform(o)}a.uniformGPU=o,"vertex"===i&&(this.bindingsOffset.fragment=u.length)}return d}getAttributesHeaderSnippet(e){let r="";if("vertex"===e){const e=this.attributes;for(let t=0;t<e.length;t++){const s=e[t];r+=`layout(location = ${t}) in ${s.type} ${s.name};`}}return r}getVarysHeaderSnippet(e){let r="";const t=this.varys,s="vertex"===e?"out":"in";for(let e=0;e<t.length;e++){const o=t[e];r+=`layout(location = ${e}) ${s} ${o.type} ${o.name};`}return r}getVarysBodySnippet(e){let r="";if("vertex"===e)for(let e of this.varys)r+=`${e.name} = ${e.snippet};`;return r}getUniformsHeaderSnippet(e){const r=this.uniforms[e];let t="",s="",o=this.bindingsOffset[e];for(let e of r)if("texture"===e.type)t+=`layout(set = 0, binding = ${o++}) uniform sampler ${e.name}_sampler;`,t+=`layout(set = 0, binding = ${o++}) uniform texture2D ${e.name};`;else{s+=`uniform ${this.getVectorType(e.type)} ${e.name};`}return s&&(t+=`layout(set = 0, binding = ${o++}) uniform NodeUniforms { ${s} } nodeUniforms;`),t}composeShaderCode(e,r){const t=e.indexOf("\n");let s=e.substr(0,t)+"\n\n";return s+=r,s+=e.substr(t),s}build(){return super.build(),this.vertexShader=this.composeShaderCode(this.nativeShader.vertexShader,this.vertexShader),this.fragmentShader=this.composeShaderCode(this.nativeShader.fragmentShader,this.fragmentShader),this}};
