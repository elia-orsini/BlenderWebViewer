"use strict";var e=require("./constants.cjs.js");module.exports=class{constructor(t,i){this.device=t;this.sampler=t.createSampler({minFilter:e.GPUFilterMode.Linear}),this.pipelines={},this.mipmapVertexShaderModule=t.createShaderModule({code:i.compileGLSL("#version 450\n\t\t\tconst vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\n\t\t\tconst vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\n\t\t\tlayout(location = 0) out vec2 vTex;\n\t\t\tvoid main() {\n\t\t\t\tvTex = tex[gl_VertexIndex];\n\t\t\t\tgl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\n\t\t\t}\n\t\t","vertex")}),this.mipmapFragmentShaderModule=t.createShaderModule({code:i.compileGLSL("#version 450\n\t\t\tlayout(set = 0, binding = 0) uniform sampler imgSampler;\n\t\t\tlayout(set = 0, binding = 1) uniform texture2D img;\n\t\t\tlayout(location = 0) in vec2 vTex;\n\t\t\tlayout(location = 0) out vec4 outColor;\n\t\t\tvoid main() {\n\t\t\t\toutColor = texture(sampler2D(img, imgSampler), vTex);\n\t\t\t}","fragment")})}getMipmapPipeline(t){let i=this.pipelines[t];return void 0===i&&(i=this.device.createRenderPipeline({vertexStage:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragmentStage:{module:this.mipmapFragmentShaderModule,entryPoint:"main"},primitiveTopology:e.GPUPrimitiveTopology.TriangleStrip,vertexState:{indexFormat:e.GPUIndexFormat.Uint32},colorStates:[{format:t}]}),this.pipelines[t]=i),i}generateMipmaps(e,t){const i=this.getMipmapPipeline(t.format),n=this.device.createCommandEncoder({}),o=i.getBindGroupLayout(0);let r=e.createView({baseMipLevel:0,mipLevelCount:1});for(let a=1;a<t.mipLevelCount;a++){const t=e.createView({baseMipLevel:a,mipLevelCount:1}),s=n.beginRenderPass({colorAttachments:[{attachment:t,loadValue:[0,0,0,0]}]}),l=this.device.createBindGroup({layout:o,entries:[{binding:0,resource:this.sampler},{binding:1,resource:r}]});s.setPipeline(i),s.setBindGroup(0,l),s.draw(4,1,0,0),s.endPass(),r=t}this.device.queue.submit([n.finish()])}};
