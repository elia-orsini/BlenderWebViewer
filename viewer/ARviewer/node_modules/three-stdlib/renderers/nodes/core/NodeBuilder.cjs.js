"use strict";var e=require("./NodeUniform.cjs.js"),t=require("./NodeAttribute.cjs.js"),r=require("./NodeVary.cjs.js"),s=require("./constants.cjs.js");module.exports=class{constructor(e,t){this.material=e,this.renderer=t,this.nodes=[],this.updateNodes=[],this.vertexShader=null,this.fragmentShader=null,this.slots={vertex:[],fragment:[]},this.defines={vertex:{},fragment:{}},this.uniforms={vertex:[],fragment:[]},this.attributes=[],this.varys=[],this.nodesData=new WeakMap,this.shaderStage=null}addNode(e){if(-1===this.nodes.indexOf(e)){e.getUpdateType(this)!==s.NodeUpdateType.None&&this.updateNodes.push(e),this.nodes.push(e)}}addSlot(e,t){this.slots[e].push(t)}define(e,t,r=""){this.defines[e][t]=r}getTexture(){console.warn("Abstract function.")}getConst(e,t){if("float"===e)return t+(t%1?"":".0");if("vec2"===e)return`vec2( ${t.x}, ${t.y} )`;if("vec3"===e)return`vec3( ${t.x}, ${t.y}, ${t.z} )`;if("vec4"===e)return`vec4( ${t.x}, ${t.y}, ${t.z}, ${t.w} )`;if("color"===e)return`vec3( ${t.r}, ${t.g}, ${t.b} )`;throw new Error(`Type '${e}' not found in generate constant attempt.`)}getAttribute(e,r){const s=this.attributes;for(let t of s)if(t.name===e)return t;const n=new t(e,r);return s.push(n),n}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isShaderStage(e){return this.shaderStage===e}getVectorType(e){return"color"===e?"vec3":"texture"===e?"vec4":e}getTypeFromLength(e){return 1===e?"float":2===e?"vec2":3===e?"vec3":4===e?"vec4":0}getTypeLength(e){return"float"===(e=this.getVectorType(e))?1:"vec2"===e?2:"vec3"===e?3:"vec4"===e?4:0}getDataFromNode(e,t=null){let r=this.nodesData.get(e);return void 0===r&&(r={vertex:{},fragment:{}},this.nodesData.set(e,r)),t?r[t]:r}getUniformFromNode(t,r,s){const n=this.getDataFromNode(t,r);let o=n.uniform;if(void 0===o){const a=this.uniforms[r],c=a.length;o=new e("nodeU"+c,s,t),a.push(o),n.uniform=o}return o}getVaryFromNode(e,t){const s=this.getDataFromNode(e);let n=s.vary;if(void 0===n){const e=this.varys,o=e.length;n=new r("nodeV"+o,t),e.push(n),s.vary=n}return n}flowNode(e,t){const r={};return r.result=e.build(this,t),r}_buildDefines(e){const t=this.defines[e];let r="";for(let e in t)r+=`#define ${e} ${t[e]}\n`;return r}getAttributesBodySnippet(){console.warn("Abstract function.")}getAttributesHeaderSnippet(){console.warn("Abstract function.")}getVarysHeaderSnippet(){console.warn("Abstract function.")}getVarysBodySnippet(){console.warn("Abstract function.")}getUniformsHeaderSnippet(){console.warn("Abstract function.")}getHash(){return this.vertexShader+this.fragmentShader}build(){const e=["vertex","fragment"],t={};for(let t of e){this.shaderStage=t;const e=this.slots[t];for(let r of e){const e=this.flowNode(r.node,r.output);this.define(t,`NODE_${r.name}`,e.result)}}this.shaderStage=null;for(let r of e)this.define(r,"NODE_HEADER_UNIFORMS",this.getUniformsHeaderSnippet(r)),this.define(r,"NODE_HEADER_ATTRIBUTES",this.getAttributesHeaderSnippet(r)),this.define(r,"NODE_HEADER_VARYS",this.getVarysHeaderSnippet(r)),this.define(r,"NODE_BODY_VARYS",this.getVarysBodySnippet(r)),t[r]=this._buildDefines(r);return this.vertexShader=t.vertex,this.fragmentShader=t.fragment,this}format(e,t,r){switch(`${t=this.getVectorType(t)} to ${r=this.getVectorType(r)}`){case"float to vec2":return`vec2( ${e} )`;case"float to vec3":return`vec3( ${e} )`;case"float to vec4":return`vec4( vec3( ${e} ), 1.0 )`;case"vec2 to float":return`${e}.x`;case"vec2 to vec3":return`vec3( ${e}, 0.0 )`;case"vec2 to vec4":return`vec4( ${e}.xy, 0.0, 1.0 )`;case"vec3 to float":return`${e}.x`;case"vec3 to vec2":return`${e}.xy`;case"vec3 to vec4":return`vec4( ${e}, 1.0 )`;case"vec4 to float":return`${e}.x`;case"vec4 to vec2":return`${e}.xy`;case"vec4 to vec3":return`${e}.xyz`;case"mat3 to float":return`( ${e} * vec3( 1.0 ) ).x`;case"mat3 to vec2":return`( ${e} * vec3( 1.0 ) ).xy`;case"mat3 to vec3":return`( ${e} * vec3( 1.0 ) ).xyz`;case"mat3 to vec4":return`vec4( ${e} * vec3( 1.0 ), 1.0 )`;case"mat4 to float":return`( ${e} * vec4( 1.0 ) ).x`;case"mat4 to vec2":return`( ${e} * vec4( 1.0 ) ).xy`;case"mat4 to vec3":return`( ${e} * vec4( 1.0 ) ).xyz`;case"mat4 to vec4":return`( ${e} * vec4( 1.0 ) )`}return e}};
