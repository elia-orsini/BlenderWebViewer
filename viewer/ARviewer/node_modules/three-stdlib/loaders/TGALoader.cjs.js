"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three");class r extends e.DataTextureLoader{constructor(e){super(e)}parse(r){const t=0,o=1,a=2,i=3,s=9,c=10,n=11,l=48,d=4,p=0,h=1,f=2,_=3;r.length<19&&console.error("THREE.TGALoader: Not enough data to contain header.");let u=0;const g=new Uint8Array(r),m={id_length:g[u++],colormap_type:g[u++],image_type:g[u++],colormap_index:g[u++]|g[u++]<<8,colormap_length:g[u++]|g[u++]<<8,colormap_size:g[u++],origin:[g[u++]|g[u++]<<8,g[u++]|g[u++]<<8],width:g[u++]|g[u++]<<8,height:g[u++]|g[u++]<<8,pixel_size:g[u++],flags:g[u++]};!function(e){switch(e.image_type){case o:case s:(e.colormap_length>256||24!==e.colormap_size||1!==e.colormap_type)&&console.error("THREE.TGALoader: Invalid type colormap data for indexed type.");break;case a:case i:case c:case n:e.colormap_type&&console.error("THREE.TGALoader: Invalid type colormap data for colormap type.");break;case t:console.error("THREE.TGALoader: No data.");default:console.error('THREE.TGALoader: Invalid type "%s".',e.image_type)}(e.width<=0||e.height<=0)&&console.error("THREE.TGALoader: Invalid image size."),8!==e.pixel_size&&16!==e.pixel_size&&24!==e.pixel_size&&32!==e.pixel_size&&console.error('THREE.TGALoader: Invalid pixel size "%s".',e.pixel_size)}(m),m.id_length+u>r.length&&console.error("THREE.TGALoader: No data."),u+=m.id_length;let w=!1,T=!1,E=!1;switch(m.image_type){case s:w=!0,T=!0;break;case o:T=!0;break;case c:w=!0;break;case a:break;case n:w=!0,E=!0;break;case i:E=!0}const b=new Uint8Array(m.width*m.height*4),y=function(e,r,t,o,a){let i,s;const c=t.pixel_size>>3,n=t.width*t.height*c;if(r&&(s=a.subarray(o,o+=t.colormap_length*(t.colormap_size>>3))),e){let e,r,t;i=new Uint8Array(n);let s=0;const l=new Uint8Array(c);for(;s<n;)if(e=a[o++],r=1+(127&e),128&e){for(t=0;t<c;++t)l[t]=a[o++];for(t=0;t<r;++t)i.set(l,s+t*c);s+=c*r}else{for(r*=c,t=0;t<r;++t)i[s+t]=a[o++];s+=r}}else i=a.subarray(o,o+=r?t.width*t.height:n);return{pixel_data:i,palettes:s}}(w,T,m,u,g);return function(e,r,t,o,a){let i,s,c,n,u,g;switch((m.flags&l)>>d){default:case f:i=0,c=1,u=r,s=0,n=1,g=t;break;case p:i=0,c=1,u=r,s=t-1,n=-1,g=-1;break;case _:i=r-1,c=-1,u=-1,s=0,n=1,g=t;break;case h:i=r-1,c=-1,u=-1,s=t-1,n=-1,g=-1}if(E)switch(m.pixel_size){case 8:!function(e,r,t,o,a,i,s,c){let n,l,d,p=0;const h=m.width;for(d=r;d!==o;d+=t)for(l=a;l!==s;l+=i,p++)n=c[p],e[4*(l+h*d)+0]=n,e[4*(l+h*d)+1]=n,e[4*(l+h*d)+2]=n,e[4*(l+h*d)+3]=255}(e,s,n,g,i,c,u,o);break;case 16:!function(e,r,t,o,a,i,s,c){let n,l,d=0;const p=m.width;for(l=r;l!==o;l+=t)for(n=a;n!==s;n+=i,d+=2)e[4*(n+p*l)+0]=c[d+0],e[4*(n+p*l)+1]=c[d+0],e[4*(n+p*l)+2]=c[d+0],e[4*(n+p*l)+3]=c[d+1]}(e,s,n,g,i,c,u,o);break;default:console.error("THREE.TGALoader: Format not supported.")}else switch(m.pixel_size){case 8:!function(e,r,t,o,a,i,s,c,n){const l=n;let d,p,h,f=0;const _=m.width;for(h=r;h!==o;h+=t)for(p=a;p!==s;p+=i,f++)d=c[f],e[4*(p+_*h)+3]=255,e[4*(p+_*h)+2]=l[3*d+0],e[4*(p+_*h)+1]=l[3*d+1],e[4*(p+_*h)+0]=l[3*d+2]}(e,s,n,g,i,c,u,o,a);break;case 16:!function(e,r,t,o,a,i,s,c){let n,l,d,p=0;const h=m.width;for(d=r;d!==o;d+=t)for(l=a;l!==s;l+=i,p+=2)n=c[p+0]+(c[p+1]<<8),e[4*(l+h*d)+0]=(31744&n)>>7,e[4*(l+h*d)+1]=(992&n)>>2,e[4*(l+h*d)+2]=(31&n)>>3,e[4*(l+h*d)+3]=32768&n?0:255}(e,s,n,g,i,c,u,o);break;case 24:!function(e,r,t,o,a,i,s,c){let n,l,d=0;const p=m.width;for(l=r;l!==o;l+=t)for(n=a;n!==s;n+=i,d+=3)e[4*(n+p*l)+3]=255,e[4*(n+p*l)+2]=c[d+0],e[4*(n+p*l)+1]=c[d+1],e[4*(n+p*l)+0]=c[d+2]}(e,s,n,g,i,c,u,o);break;case 32:!function(e,r,t,o,a,i,s,c){let n,l,d=0;const p=m.width;for(l=r;l!==o;l+=t)for(n=a;n!==s;n+=i,d+=4)e[4*(n+p*l)+2]=c[d+0],e[4*(n+p*l)+1]=c[d+1],e[4*(n+p*l)+0]=c[d+2],e[4*(n+p*l)+3]=c[d+3]}(e,s,n,g,i,c,u,o);break;default:console.error("THREE.TGALoader: Format not supported.")}}(b,m.width,m.height,y.pixel_data,y.palettes),{data:b,width:m.width,height:m.height,flipY:!0,generateMipmaps:!0,minFilter:e.LinearMipmapLinearFilter}}}exports.TGALoader=r;
