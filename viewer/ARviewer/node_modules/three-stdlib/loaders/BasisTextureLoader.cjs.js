"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three");const t=new WeakMap;class r extends e.Loader{constructor(e){super(e),this.transcoderPath="",this.transcoderBinary=null,this.transcoderPending=null,this.workerLimit=4,this.workerPool=[],this.workerNextTaskID=1,this.workerSourceURL="",this.workerConfig=null}setTranscoderPath(e){return this.transcoderPath=e,this}setWorkerLimit(e){return this.workerLimit=e,this}detectSupport(e){return this.workerConfig={astcSupported:e.extensions.has("WEBGL_compressed_texture_astc"),etc1Supported:e.extensions.has("WEBGL_compressed_texture_etc1"),etc2Supported:e.extensions.has("WEBGL_compressed_texture_etc"),dxtSupported:e.extensions.has("WEBGL_compressed_texture_s3tc"),bptcSupported:e.extensions.has("EXT_texture_compression_bptc"),pvrtcSupported:e.extensions.has("WEBGL_compressed_texture_pvrtc")||e.extensions.has("WEBKIT_WEBGL_compressed_texture_pvrtc")},this}load(r,o,a,s){const i=new e.FileLoader(this.manager);i.setResponseType("arraybuffer"),i.setWithCredentials(this.withCredentials);const n=new e.CompressedTexture;return i.load(r,(e=>{if(t.has(e)){return t.get(e).promise.then(o).catch(s)}this._createTexture([e]).then((function(e){n.copy(e),n.needsUpdate=!0,o&&o(n)})).catch(s)}),a,s),n}parseInternalAsync(e){const{levels:t}=e,r=new Set;for(let e=0;e<t.length;e++)r.add(t[e].data.buffer);return this._createTexture(Array.from(r),{...e,lowLevel:!0})}_createTexture(r,o={}){let a,s;const i=o;let n=0;for(let e=0;e<r.length;e++)n+=r[e].byteLength;const d=this._allocateWorker(n).then((e=>(a=e,s=this.workerNextTaskID++,new Promise(((e,t)=>{a._callbacks[s]={resolve:e,reject:t},a.postMessage({type:"transcode",id:s,buffers:r,taskConfig:i},r)}))))).then((t=>{const{mipmaps:r,width:o,height:a,format:s}=t,i=new e.CompressedTexture(r,o,a,s,e.UnsignedByteType);return i.minFilter=1===r.length?e.LinearFilter:e.LinearMipmapLinearFilter,i.magFilter=e.LinearFilter,i.generateMipmaps=!1,i.needsUpdate=!0,i}));return d.catch((()=>!0)).then((()=>{a&&s&&(a._taskLoad-=n,delete a._callbacks[s])})),t.set(r[0],{promise:d}),d}_initTranscoder(){if(!this.transcoderPending){const t=new e.FileLoader(this.manager);t.setPath(this.transcoderPath),t.setWithCredentials(this.withCredentials);const o=new Promise(((e,r)=>{t.load("basis_transcoder.js",e,void 0,r)})),a=new e.FileLoader(this.manager);a.setPath(this.transcoderPath),a.setResponseType("arraybuffer"),a.setWithCredentials(this.withCredentials);const s=new Promise(((e,t)=>{a.load("basis_transcoder.wasm",e,void 0,t)}));this.transcoderPending=Promise.all([o,s]).then((([e,t])=>{const o=r.BasisWorker.toString(),a=["/* constants */","let _EngineFormat = "+JSON.stringify(r.EngineFormat),"let _TranscoderFormat = "+JSON.stringify(r.TranscoderFormat),"let _BasisFormat = "+JSON.stringify(r.BasisFormat),"/* basis_transcoder.js */",e,"/* worker */",o.substring(o.indexOf("{")+1,o.lastIndexOf("}"))].join("\n");this.workerSourceURL=URL.createObjectURL(new Blob([a])),this.transcoderBinary=t}))}return this.transcoderPending}_allocateWorker(e){return this._initTranscoder().then((()=>{if(this.workerPool.length<this.workerLimit){const e=new Worker(this.workerSourceURL);e._callbacks={},e._taskLoad=0,e.postMessage({type:"init",config:this.workerConfig,transcoderBinary:this.transcoderBinary}),e.onmessage=function(t){const r=t.data;switch(r.type){case"transcode":e._callbacks[r.id].resolve(r);break;case"error":e._callbacks[r.id].reject(r);break;default:console.error('THREE.BasisTextureLoader: Unexpected message, "'+r.type+'"')}},this.workerPool.push(e)}else this.workerPool.sort((function(e,t){return e._taskLoad>t._taskLoad?-1:1}));const t=this.workerPool[this.workerPool.length-1];return t._taskLoad+=e,t}))}dispose(){for(let e=0;e<this.workerPool.length;e++)this.workerPool[e].terminate();return this.workerPool.length=0,this}}r.BasisFormat={ETC1S:0,UASTC_4x4:1},r.TranscoderFormat={ETC1:0,ETC2:1,BC1:2,BC3:3,BC4:4,BC5:5,BC7_M6_OPAQUE_ONLY:6,BC7_M5:7,PVRTC1_4_RGB:8,PVRTC1_4_RGBA:9,ASTC_4x4:10,ATC_RGB:11,ATC_RGBA_INTERPOLATED_ALPHA:12,RGBA32:13,RGB565:14,BGR565:15,RGBA4444:16},r.EngineFormat={RGBAFormat:e.RGBAFormat,RGBA_ASTC_4x4_Format:e.RGBA_ASTC_4x4_Format,RGBA_BPTC_Format:e.RGBA_BPTC_Format,RGBA_ETC2_EAC_Format:e.RGBA_ETC2_EAC_Format,RGBA_PVRTC_4BPPV1_Format:e.RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT5_Format:e.RGBA_S3TC_DXT5_Format,RGB_ETC1_Format:e.RGB_ETC1_Format,RGB_ETC2_Format:e.RGB_ETC2_Format,RGB_PVRTC_4BPPV1_Format:e.RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format:e.RGB_S3TC_DXT1_Format},r.BasisWorker=function(){let e,t,r;const o=_EngineFormat,a=_TranscoderFormat,s=_BasisFormat;onmessage=function(o){const a=o.data;switch(a.type){case"init":e=a.config,i=a.transcoderBinary,t=new Promise((e=>{r={wasmBinary:i,onRuntimeInitialized:e},BASIS(r)})).then((()=>{r.initializeBasis()}));break;case"transcode":t.then((()=>{try{const{width:e,height:t,hasAlpha:o,mipmaps:i,format:n}=a.taskConfig.lowLevel?function(e){const{basisFormat:t,width:o,height:a,hasAlpha:i}=e,{transcoderFormat:n,engineFormat:d}=c(t,o,a,i),T=r.getBytesPerBlockOrPixel(n);h(r.isFormatSupported(n),"THREE.BasisTextureLoader: Unsupported format.");const p=[];if(t===s.ETC1S){const t=new r.LowLevelETC1SImageTranscoder,{endpointCount:o,endpointsData:a,selectorCount:s,selectorsData:d,tablesData:c}=e.globalData;try{let r;r=t.decodePalettes(o,a,s,d),h(r,"THREE.BasisTextureLoader: decodePalettes() failed."),r=t.decodeTables(c),h(r,"THREE.BasisTextureLoader: decodeTables() failed.");for(let o=0;o<e.levels.length;o++){const a=e.levels[o],s=e.globalData.imageDescs[o],d=m(n,a.width,a.height),c=new Uint8Array(d);r=t.transcodeImage(n,c,d/T,a.data,l(n,a.width),_(n,a.height),a.width,a.height,a.index,s.rgbSliceByteOffset,s.rgbSliceByteLength,s.alphaSliceByteOffset,s.alphaSliceByteLength,s.imageFlags,i,!1,0,0),h(r,"THREE.BasisTextureLoader: transcodeImage() failed for level "+a.index+"."),p.push({data:c,width:a.width,height:a.height})}}finally{t.delete()}}else for(let t=0;t<e.levels.length;t++){const o=e.levels[t],a=m(n,o.width,o.height),s=new Uint8Array(a);h(r.transcodeUASTCImage(n,s,a/T,o.data,l(n,o.width),_(n,o.height),o.width,o.height,o.index,0,o.data.byteLength,0,i,!1,0,0,-1,-1),"THREE.BasisTextureLoader: transcodeUASTCImage() failed for level "+o.index+"."),p.push({data:s,width:o.width,height:o.height})}return{width:o,height:a,hasAlpha:i,mipmaps:p,format:d}}(a.taskConfig):function(e){const t=new r.BasisFile(new Uint8Array(e)),o=t.isUASTC()?s.UASTC_4x4:s.ETC1S,a=t.getImageWidth(0,0),i=t.getImageHeight(0,0),n=t.getNumLevels(0),d=t.getHasAlpha();function h(){t.close(),t.delete()}const{transcoderFormat:l,engineFormat:_}=c(o,a,i,d);if(!a||!i||!n)throw h(),new Error("THREE.BasisTextureLoader:\tInvalid texture");if(!t.startTranscoding())throw h(),new Error("THREE.BasisTextureLoader: .startTranscoding failed");const m=[];for(let e=0;e<n;e++){const r=t.getImageWidth(0,e),o=t.getImageHeight(0,e),a=new Uint8Array(t.getImageTranscodedSizeInBytes(0,e,l));if(!t.transcodeImage(a,0,e,l,0,d))throw h(),new Error("THREE.BasisTextureLoader: .transcodeImage failed.");m.push({data:a,width:r,height:o})}return h(),{width:a,height:i,hasAlpha:d,mipmaps:m,format:_}}(a.buffers[0]),d=[];for(let e=0;e<i.length;++e)d.push(i[e].data.buffer);self.postMessage({type:"transcode",id:a.id,width:e,height:t,hasAlpha:o,mipmaps:i,format:n},d)}catch(e){console.error(e),self.postMessage({type:"error",id:a.id,error:e.message})}}))}var i};const i=[{if:"astcSupported",basisFormat:[s.UASTC_4x4],transcoderFormat:[a.ASTC_4x4,a.ASTC_4x4],engineFormat:[o.RGBA_ASTC_4x4_Format,o.RGBA_ASTC_4x4_Format],priorityETC1S:1/0,priorityUASTC:1,needsPowerOfTwo:!1},{if:"bptcSupported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[a.BC7_M5,a.BC7_M5],engineFormat:[o.RGBA_BPTC_Format,o.RGBA_BPTC_Format],priorityETC1S:3,priorityUASTC:2,needsPowerOfTwo:!1},{if:"dxtSupported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[a.BC1,a.BC3],engineFormat:[o.RGB_S3TC_DXT1_Format,o.RGBA_S3TC_DXT5_Format],priorityETC1S:4,priorityUASTC:5,needsPowerOfTwo:!1},{if:"etc2Supported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[a.ETC1,a.ETC2],engineFormat:[o.RGB_ETC2_Format,o.RGBA_ETC2_EAC_Format],priorityETC1S:1,priorityUASTC:3,needsPowerOfTwo:!1},{if:"etc1Supported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[a.ETC1,a.ETC1],engineFormat:[o.RGB_ETC1_Format,o.RGB_ETC1_Format],priorityETC1S:2,priorityUASTC:4,needsPowerOfTwo:!1},{if:"pvrtcSupported",basisFormat:[s.ETC1S,s.UASTC_4x4],transcoderFormat:[a.PVRTC1_4_RGB,a.PVRTC1_4_RGBA],engineFormat:[o.RGB_PVRTC_4BPPV1_Format,o.RGBA_PVRTC_4BPPV1_Format],priorityETC1S:5,priorityUASTC:6,needsPowerOfTwo:!0}],n=i.sort((function(e,t){return e.priorityETC1S-t.priorityETC1S})),d=i.sort((function(e,t){return e.priorityUASTC-t.priorityUASTC}));function c(t,r,i,c){let h,l;const _=t===s.ETC1S?n:d;for(let o=0;o<_.length;o++){const a=_[o];if(e[a.if]&&(a.basisFormat.includes(t)&&(!a.needsPowerOfTwo||T(r)&&T(i))))return h=a.transcoderFormat[c?1:0],l=a.engineFormat[c?1:0],{transcoderFormat:h,engineFormat:l}}return console.warn("THREE.BasisTextureLoader: No suitable compressed texture format found. Decoding to RGBA32."),h=a.RGBA32,l=o.RGBAFormat,{transcoderFormat:h,engineFormat:l}}function h(e,t){if(!e)throw new Error(t)}function l(e,t){return Math.ceil(t/r.getFormatBlockWidth(e))}function _(e,t){return Math.ceil(t/r.getFormatBlockHeight(e))}function m(e,t,o){const s=r.getBytesPerBlockOrPixel(e);if(r.formatIsUncompressed(e))return t*o*s;if(e===a.PVRTC1_4_RGB||e===a.PVRTC1_4_RGBA){const e=t+3&-4,r=o+3&-4;return(Math.max(8,e)*Math.max(8,r)*4+7)/8}return l(e,t)*_(e,o)*s}function T(e){return e<=2||0==(e&e-1)&&0!==e}},exports.BasisTextureLoader=r;
