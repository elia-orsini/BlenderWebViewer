"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three"),i=require("./Pass.cjs.js"),a=require("../shaders/CopyShader.cjs.js"),t=require("../shaders/LuminosityShader.cjs.js"),n=require("../shaders/ToneMapShader.cjs.js");require("@babel/runtime/helpers/defineProperty");var r=function(r,s){this.resolution=void 0!==s?s:256,this.needsInit=!0,this.adaptive=void 0===r||!!r,this.luminanceRT=null,this.previousLuminanceRT=null,this.currentLuminanceRT=null,void 0===a.CopyShader&&console.error("THREE.AdaptiveToneMappingPass relies on CopyShader");var u=a.CopyShader;this.copyUniforms=e.UniformsUtils.clone(u.uniforms),this.materialCopy=new e.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:e.NoBlending,depthTest:!1}),void 0===t.LuminosityShader&&console.error("THREE.AdaptiveToneMappingPass relies on LuminosityShader"),this.materialLuminance=new e.ShaderMaterial({uniforms:e.UniformsUtils.clone(t.LuminosityShader.uniforms),vertexShader:t.LuminosityShader.vertexShader,fragmentShader:t.LuminosityShader.fragmentShader,blending:e.NoBlending}),this.adaptLuminanceShader={defines:{MIP_LEVEL_1X1:(Math.log(this.resolution)/Math.log(2)).toFixed(1)},uniforms:{lastLum:{value:null},currentLum:{value:null},minLuminance:{value:.01},delta:{value:.016},tau:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = uv;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["varying vec2 vUv;","uniform sampler2D lastLum;","uniform sampler2D currentLum;","uniform float minLuminance;","uniform float delta;","uniform float tau;","void main() {","\tvec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );","\tvec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );","\tfloat fLastLum = max( minLuminance, lastLum.r );","\tfloat fCurrentLum = max( minLuminance, currentLum.r );","\tfCurrentLum *= fCurrentLum;","\tfloat fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));","\tgl_FragColor.r = fAdaptedLum;","}"].join("\n")},this.materialAdaptiveLum=new e.ShaderMaterial({uniforms:e.UniformsUtils.clone(this.adaptLuminanceShader.uniforms),vertexShader:this.adaptLuminanceShader.vertexShader,fragmentShader:this.adaptLuminanceShader.fragmentShader,defines:Object.assign({},this.adaptLuminanceShader.defines),blending:e.NoBlending}),void 0===n.ToneMapShader&&console.error("THREE.AdaptiveToneMappingPass relies on ToneMapShader"),this.materialToneMap=new e.ShaderMaterial({uniforms:e.UniformsUtils.clone(n.ToneMapShader.uniforms),vertexShader:n.ToneMapShader.vertexShader,fragmentShader:n.ToneMapShader.fragmentShader,blending:e.NoBlending}),this.fsQuad=new i.FullScreenQuad(null)};r.prototype=Object.assign(Object.create(i.Pass.prototype),{constructor:r,render:function(e,i,a,t){this.needsInit&&(this.reset(e),this.luminanceRT.texture.type=a.texture.type,this.previousLuminanceRT.texture.type=a.texture.type,this.currentLuminanceRT.texture.type=a.texture.type,this.needsInit=!1),this.adaptive&&(this.fsQuad.material=this.materialLuminance,this.materialLuminance.uniforms.tDiffuse.value=a.texture,e.setRenderTarget(this.currentLuminanceRT),this.fsQuad.render(e),this.fsQuad.material=this.materialAdaptiveLum,this.materialAdaptiveLum.uniforms.delta.value=t,this.materialAdaptiveLum.uniforms.lastLum.value=this.previousLuminanceRT.texture,this.materialAdaptiveLum.uniforms.currentLum.value=this.currentLuminanceRT.texture,e.setRenderTarget(this.luminanceRT),this.fsQuad.render(e),this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.luminanceRT.texture,e.setRenderTarget(this.previousLuminanceRT),this.fsQuad.render(e)),this.fsQuad.material=this.materialToneMap,this.materialToneMap.uniforms.tDiffuse.value=a.texture,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(i),this.clear&&e.clear(),this.fsQuad.render(e))},reset:function(){this.luminanceRT&&this.luminanceRT.dispose(),this.currentLuminanceRT&&this.currentLuminanceRT.dispose(),this.previousLuminanceRT&&this.previousLuminanceRT.dispose();var i={minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBAFormat};this.luminanceRT=new e.WebGLRenderTarget(this.resolution,this.resolution,i),this.luminanceRT.texture.name="AdaptiveToneMappingPass.l",this.luminanceRT.texture.generateMipmaps=!1,this.previousLuminanceRT=new e.WebGLRenderTarget(this.resolution,this.resolution,i),this.previousLuminanceRT.texture.name="AdaptiveToneMappingPass.pl",this.previousLuminanceRT.texture.generateMipmaps=!1,i.minFilter=e.LinearMipmapLinearFilter,i.generateMipmaps=!0,this.currentLuminanceRT=new e.WebGLRenderTarget(this.resolution,this.resolution,i),this.currentLuminanceRT.texture.name="AdaptiveToneMappingPass.cl",this.adaptive&&(this.materialToneMap.defines.ADAPTED_LUMINANCE="",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT.texture),this.fsQuad.material=new e.MeshBasicMaterial({color:7829367}),this.materialLuminance.needsUpdate=!0,this.materialAdaptiveLum.needsUpdate=!0,this.materialToneMap.needsUpdate=!0},setAdaptive:function(e){e?(this.adaptive=!0,this.materialToneMap.defines.ADAPTED_LUMINANCE="",this.materialToneMap.uniforms.luminanceMap.value=this.luminanceRT.texture):(this.adaptive=!1,delete this.materialToneMap.defines.ADAPTED_LUMINANCE,this.materialToneMap.uniforms.luminanceMap.value=null),this.materialToneMap.needsUpdate=!0},setAdaptionRate:function(e){e&&(this.materialAdaptiveLum.uniforms.tau.value=Math.abs(e))},setMinLuminance:function(e){e&&(this.materialToneMap.uniforms.minLuminance.value=e,this.materialAdaptiveLum.uniforms.minLuminance.value=e)},setMaxLuminance:function(e){e&&(this.materialToneMap.uniforms.maxLuminance.value=e)},setAverageLuminance:function(e){e&&(this.materialToneMap.uniforms.averageLuminance.value=e)},setMiddleGrey:function(e){e&&(this.materialToneMap.uniforms.middleGrey.value=e)},dispose:function(){this.luminanceRT&&this.luminanceRT.dispose(),this.previousLuminanceRT&&this.previousLuminanceRT.dispose(),this.currentLuminanceRT&&this.currentLuminanceRT.dispose(),this.materialLuminance&&this.materialLuminance.dispose(),this.materialAdaptiveLum&&this.materialAdaptiveLum.dispose(),this.materialCopy&&this.materialCopy.dispose(),this.materialToneMap&&this.materialToneMap.dispose()}}),exports.AdaptiveToneMappingPass=r;
