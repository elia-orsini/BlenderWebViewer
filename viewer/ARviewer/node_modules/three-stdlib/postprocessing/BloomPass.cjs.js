"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@babel/runtime/helpers/defineProperty"),t=require("./Pass.cjs.js"),r=require("three"),n=require("../shaders/ConvolutionShader.cjs.js");function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=i(e);class o extends t.Pass{constructor(e=1,i=25,o=4,l=256){super(),s.default(this,"renderTargetX",void 0),s.default(this,"renderTargetY",void 0),s.default(this,"materialCombine",void 0),s.default(this,"materialConvolution",void 0),s.default(this,"fsQuad",void 0),s.default(this,"combineUniforms",void 0),s.default(this,"convolutionUniforms",void 0),s.default(this,"blurX",new r.Vector2(.001953125,0)),s.default(this,"blurY",new r.Vector2(0,.001953125)),this.renderTargetX=new r.WebGLRenderTarget(l,l),this.renderTargetX.texture.name="BloomPass.x",this.renderTargetY=new r.WebGLRenderTarget(l,l),this.renderTargetY.texture.name="BloomPass.y",this.combineUniforms=r.UniformsUtils.clone(a.uniforms),this.combineUniforms.strength.value=e,this.materialCombine=new r.ShaderMaterial({uniforms:this.combineUniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader,blending:r.AdditiveBlending,transparent:!0}),void 0===n.ConvolutionShader&&console.error("BloomPass relies on ConvolutionShader");const u=n.ConvolutionShader;this.convolutionUniforms=r.UniformsUtils.clone(u.uniforms),this.convolutionUniforms.uImageIncrement.value=this.blurX,this.convolutionUniforms.cKernel.value=n.ConvolutionShader.buildKernel(o),this.materialConvolution=new r.ShaderMaterial({uniforms:this.convolutionUniforms,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,defines:{KERNEL_SIZE_FLOAT:i.toFixed(1),KERNEL_SIZE_INT:i.toFixed(0)}}),this.needsSwap=!1,this.fsQuad=new t.FullScreenQuad(this.materialConvolution)}render(e,t,r,n,i){i&&e.state.buffers.stencil.setTest(!1),this.fsQuad.material=this.materialConvolution,this.convolutionUniforms.tDiffuse.value=r.texture,this.convolutionUniforms.uImageIncrement.value=this.blurX,e.setRenderTarget(this.renderTargetX),e.clear(),this.fsQuad.render(e),this.convolutionUniforms.tDiffuse.value=this.renderTargetX.texture,this.convolutionUniforms.uImageIncrement.value=this.blurY,e.setRenderTarget(this.renderTargetY),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.materialCombine,this.combineUniforms.tDiffuse.value=this.renderTargetY.texture,i&&e.state.buffers.stencil.setTest(!0),e.setRenderTarget(r),this.clear&&e.clear(),this.fsQuad.render(e)}}const a={uniforms:{tDiffuse:{value:null},strength:{value:1}},vertexShader:"\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }",fragmentShader:"\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }"};exports.BloomPass=o;
