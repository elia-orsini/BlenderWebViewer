"use strict";var e=require("../core/Node.cjs.js"),r=require("../accessors/Object3DNode.cjs.js"),s=require("../accessors/PositionNode.cjs.js"),o=require("../core/UniformNode.cjs.js"),t=require("../math/OperatorNode.cjs.js"),i=require("../math/MathNode.cjs.js"),c=require("../core/constants.cjs.js"),j=require("../functions/BSDFs.cjs.js"),u=require("three");require("../core/NodeUtils.cjs.js"),require("@babel/runtime/helpers/defineProperty"),require("../core/InputNode.cjs.js"),require("../core/AttributeNode.cjs.js"),require("../core/VaryNode.cjs.js"),require("../accessors/ModelNode.cjs.js"),require("../core/TempNode.cjs.js"),require("../core/ExpressionNode.cjs.js"),require("../utils/JoinNode.cjs.js"),require("../utils/SplitNode.cjs.js"),require("../core/NodeBuilder.cjs.js"),require("../core/NodeUniform.cjs.js"),require("../core/NodeAttribute.cjs.js"),require("../core/NodeVary.cjs.js"),require("../core/NodeVar.cjs.js"),require("../core/NodeCode.cjs.js"),require("../core/NodeKeywords.cjs.js"),require("../ShaderNode.cjs.js"),require("../core/PropertyNode.cjs.js"),require("../core/VarNode.cjs.js"),require("../core/ConstNode.cjs.js"),require("../accessors/BufferNode.cjs.js"),require("../accessors/NormalNode.cjs.js"),require("../accessors/CameraNode.cjs.js"),require("../accessors/TextureNode.cjs.js"),require("../accessors/UVNode.cjs.js"),require("../math/CondNode.cjs.js"),require("../core/ContextNode.cjs.js"),require("../utils/ArrayElementNode.cjs.js"),require("../utils/ConvertNode.cjs.js");module.exports=class extends e{constructor(e=null){super("vec3"),this.updateType=c.NodeUpdateType.Object,this.light=e,this._colorNode=new o(new u.Color),this._lightCutoffDistanceNode=new o(0),this._lightDecayExponentNode=new o(0)}getHash(){return this.light.uuid}update(){this._colorNode.value.copy(this.light.color).multiplyScalar(this.light.intensity),this._lightCutoffDistanceNode.value=this.light.distance,this._lightDecayExponentNode.value=this.light.decay}generate(e){const o=new r(r.VIEW_POSITION),c=new s(s.VIEW),u=new t("-",o,c),d=new i(i.NORMALIZE,u),n=new i(i.LENGTH,u),a=j.getDistanceAttenuation({lightDistance:n,cutoffDistance:this._lightCutoffDistanceNode,decayExponent:this._lightDecayExponentNode}),N=new t("*",this._colorNode,a);o.object3d=this.light;const l=e.context.lightingModel;if(void 0!==l){l({lightDirection:d,lightColor:N,directDiffuse:e.context.directDiffuse,directSpecular:e.context.directSpecular},e)}}};
