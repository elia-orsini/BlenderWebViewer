"use strict";var e=require("../core/Node.cjs.js"),s=require("./LightNode.cjs.js");require("../core/constants.cjs.js"),require("../core/NodeUtils.cjs.js"),require("three"),require("../accessors/Object3DNode.cjs.js"),require("@babel/runtime/helpers/defineProperty"),require("../core/UniformNode.cjs.js"),require("../core/InputNode.cjs.js"),require("../accessors/PositionNode.cjs.js"),require("../core/AttributeNode.cjs.js"),require("../core/VaryNode.cjs.js"),require("../accessors/ModelNode.cjs.js"),require("../math/MathNode.cjs.js"),require("../core/TempNode.cjs.js"),require("../core/ExpressionNode.cjs.js"),require("../utils/JoinNode.cjs.js"),require("../utils/SplitNode.cjs.js"),require("../core/NodeBuilder.cjs.js"),require("../core/NodeUniform.cjs.js"),require("../core/NodeAttribute.cjs.js"),require("../core/NodeVary.cjs.js"),require("../core/NodeVar.cjs.js"),require("../core/NodeCode.cjs.js"),require("../core/NodeKeywords.cjs.js"),require("../math/OperatorNode.cjs.js"),require("../functions/BSDFs.cjs.js"),require("../ShaderNode.cjs.js"),require("../core/PropertyNode.cjs.js"),require("../core/VarNode.cjs.js"),require("../core/ConstNode.cjs.js"),require("../accessors/BufferNode.cjs.js"),require("../accessors/NormalNode.cjs.js"),require("../accessors/CameraNode.cjs.js"),require("../accessors/TextureNode.cjs.js"),require("../accessors/UVNode.cjs.js"),require("../math/CondNode.cjs.js"),require("../core/ContextNode.cjs.js"),require("../utils/ArrayElementNode.cjs.js"),require("../utils/ConvertNode.cjs.js");module.exports=class extends e{constructor(e=[]){super("vec3"),this.lightNodes=e,this._hash=null}get hasLight(){return this.lightNodes.length>0}generate(e){const s=this.lightNodes;for(const r of s)r.build(e);return"vec3( 0.0 )"}getHash(){if(null===this._hash){let e="";const s=this.lightNodes;for(const r of s)e+=r.light.uuid+" ";this._hash=e}return this._hash}getLightNodeByHash(e){const s=this.lightNodes;for(const r of s)if(r.light.uuid===e)return r;return null}fromLights(e){const r=[];e=(e=>e.sort(((e,s)=>e.id-s.id)))(e);for(const o of e){let e=this.getLightNodeByHash(o.uuid);null===e&&(e=new s(o)),r.push(e)}return this.lightNodes=r,this._hash=null,this}};
