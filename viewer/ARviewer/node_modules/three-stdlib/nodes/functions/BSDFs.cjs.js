"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("../ShaderNode.cjs.js");require("../core/PropertyNode.cjs.js"),require("../core/Node.cjs.js"),require("../core/constants.cjs.js"),require("../core/NodeUtils.cjs.js"),require("three"),require("../core/VarNode.cjs.js"),require("../core/AttributeNode.cjs.js"),require("../core/VaryNode.cjs.js"),require("../core/ConstNode.cjs.js"),require("../core/InputNode.cjs.js"),require("../core/UniformNode.cjs.js"),require("../accessors/BufferNode.cjs.js"),require("../accessors/PositionNode.cjs.js"),require("@babel/runtime/helpers/defineProperty"),require("../accessors/ModelNode.cjs.js"),require("../accessors/Object3DNode.cjs.js"),require("../math/MathNode.cjs.js"),require("../core/TempNode.cjs.js"),require("../core/ExpressionNode.cjs.js"),require("../utils/JoinNode.cjs.js"),require("../utils/SplitNode.cjs.js"),require("../core/NodeBuilder.cjs.js"),require("../core/NodeUniform.cjs.js"),require("../core/NodeAttribute.cjs.js"),require("../core/NodeVary.cjs.js"),require("../core/NodeVar.cjs.js"),require("../core/NodeCode.cjs.js"),require("../core/NodeKeywords.cjs.js"),require("../math/OperatorNode.cjs.js"),require("../accessors/NormalNode.cjs.js"),require("../accessors/CameraNode.cjs.js"),require("../accessors/TextureNode.cjs.js"),require("../accessors/UVNode.cjs.js"),require("../math/CondNode.cjs.js"),require("../core/ContextNode.cjs.js"),require("../utils/ArrayElementNode.cjs.js"),require("../utils/ConvertNode.cjs.js");const r=new e.ShaderNode((r=>{const{f0:o,f90:s,dotVH:t}=r,d=e.exp2(e.mul(e.sub(e.mul(-5.55473,t),6.98316),t));return e.add(e.mul(o,e.sub(1,d)),e.mul(s,d))})),o=new e.ShaderNode((r=>e.mul(1/Math.PI,r.diffuseColor))),s=new e.ShaderNode((r=>{const{lightDistance:o,cutoffDistance:s,decayExponent:t}=r;return e.cond(e.and(e.greaterThan(s,0),e.greaterThan(t,0)),e.pow(e.saturate(e.add(e.div(e.negate(o),s),1)),t),1)})),t=new e.ShaderNode((r=>{const{alpha:o,dotNL:s,dotNV:t}=r,d=e.pow2(o),i=e.mul(s,e.sqrt(e.add(d,e.mul(e.sub(1,d),e.pow2(t))))),c=e.mul(t,e.sqrt(e.add(d,e.mul(e.sub(1,d),e.pow2(s)))));return e.div(.5,e.max(e.add(i,c),e.EPSILON))})),d=new e.ShaderNode((r=>{const{alpha:o,dotNH:s}=r,t=e.pow2(o),d=e.add(e.mul(e.pow2(s),e.sub(t,1)),1);return e.mul(1/Math.PI,e.div(t,e.pow2(d)))})),i=new e.ShaderNode((o=>{const{lightDirection:s,f0:i,f90:c,roughness:u}=o,a=e.pow2(u),j=e.normalize(e.add(s,e.positionViewDirection)),n=e.saturate(e.dot(e.transformedNormalView,s)),l=e.saturate(e.dot(e.transformedNormalView,e.positionViewDirection)),N=e.saturate(e.dot(e.transformedNormalView,j)),q=e.saturate(e.dot(e.positionViewDirection,j)),m=r({f0:i,f90:c,dotVH:q}),h=t({alpha:a,dotNL:n,dotNV:l}),p=d({alpha:a,dotNH:N});return e.mul(m,e.mul(h,p))})),c=new e.ShaderNode((r=>{const{lightDirection:s,lightColor:t,directDiffuse:d,directSpecular:c}=r,u=e.saturate(e.dot(e.transformedNormalView,s));let a=e.mul(u,t);a=e.mul(a,Math.PI),e.addTo(d,e.mul(a,o({diffuseColor:e.diffuseColor.rgb}))),e.addTo(c,e.mul(a,i({lightDirection:s,f0:e.specularColor,f90:1,roughness:e.roughness})))})),u=new e.ShaderNode((e=>{c(e)}));exports.BRDF_GGX=i,exports.BRDF_Lambert=o,exports.D_GGX=d,exports.F_Schlick=r,exports.PhysicalLightingModel=u,exports.RE_Direct_Physical=c,exports.V_GGX_SmithCorrelated=t,exports.getDistanceAttenuation=s;
