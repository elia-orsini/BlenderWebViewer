"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@babel/runtime/helpers/defineProperty"),t=require("three"),n=require("mmd-parser");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=r(e);exports.MMDExporter=class{constructor(){o.default(this,"u2sTable",void 0)}parseVpd(e,n,r){if(!0!==e.isSkinnedMesh)return console.warn("THREE.MMDExporter: parseVpd() requires SkinnedMesh instance."),null;function o(e){Math.abs(e)<1e-6&&(e=0);let t=e.toString();-1===t.indexOf(".")&&(t+="."),t+="000000";const n=t.indexOf(".");return t.slice(0,n)+"."+t.slice(n+1,n+7)}function s(e){const t=[];for(let n=0,r=e.length;n<r;n++)t.push(o(e[n]));return t.join(",")}e.updateMatrixWorld(!0);const i=e.skeleton.bones,a=this.getBindBones(e),u=new t.Vector3,c=new t.Quaternion,l=new t.Quaternion,h=new t.Matrix4,p=[];p.push("Vocaloid Pose Data file"),p.push(""),p.push((""!==e.name?e.name.replace(/\s/g,"_"):"skin")+".osm;"),p.push(i.length+";"),p.push("");for(let e=0,t=i.length;e<t;e++){const t=i[e],n=a[e];!0===r&&void 0!==t.userData.ik&&void 0!==t.userData.ik.originalMatrix?h.fromArray(t.userData.ik.originalMatrix):h.copy(t.matrix),u.setFromMatrixPosition(h),c.setFromRotationMatrix(h);const o=u.sub(n.position).toArray(),d=l.copy(n.quaternion).conjugate().multiply(c).toArray();o[2]=-o[2],d[0]=-d[0],d[1]=-d[1],p.push("Bone"+e+"{"+t.name),p.push("  "+s(o)+";"),p.push("  "+s(d)+";"),p.push("}"),p.push("")}p.push("");const d=p.join("\n");return!0===n?this.unicodeToShiftjis(d):d}unicodeToShiftjis(e){if(void 0===this.u2sTable){const e=(new n.CharsetEncoder).s2uTable;this.u2sTable={};const t=Object.keys(e);for(let n=0,r=t.length;n<r;n++){let r=t[n];const o=e[r];this.u2sTable[o]=parseInt(r)}}const t=[];for(let n=0,r=e.length;n<r;n++){const r=e.charCodeAt(n),o=this.u2sTable[r];if(void 0===o)throw"cannot convert charcode 0x"+r.toString(16);o>255?(t.push(o>>8&255),t.push(255&o)):t.push(255&o)}return new Uint8Array(t)}getBindBones(e){const t=e.clone();return t.pose(),t.skeleton.bones}};
