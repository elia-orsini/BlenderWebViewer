"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("three");const e=(()=>{const e=new t.Frustum,r=new t.Vector3,o=new t.Vector3,a=new t.Vector3,s=new t.Vector3,n=new t.Vector3,i=new t.Vector3,c=new t.Vector3,h=new t.Vector3,m=new t.Vector3,l=new t.Vector3,p=new t.Vector3,u=new t.Vector3,d=new t.Vector3,y=new t.Vector3;return class{constructor(e,r,o){this.camera=e,this.scene=r,this.startPoint=new t.Vector3,this.endPoint=new t.Vector3,this.collection=[],this.deep=o||Number.MAX_VALUE}select(t,r){return this.startPoint=t||this.startPoint,this.endPoint=r||this.endPoint,this.collection=[],this.updateFrustum(this.startPoint,this.endPoint),this.searchChildInFrustum(e,this.scene),this.collection}updateFrustum(t,r){if(t=t||this.startPoint,r=r||this.endPoint,t.x===r.x&&(r.x+=Number.EPSILON),t.y===r.y&&(r.y+=Number.EPSILON),this.camera.updateProjectionMatrix(),this.camera.updateMatrixWorld(),this.camera.isPerspectiveCamera)o.copy(t),o.x=Math.min(t.x,r.x),o.y=Math.max(t.y,r.y),r.x=Math.max(t.x,r.x),r.y=Math.min(t.y,r.y),a.setFromMatrixPosition(this.camera.matrixWorld),s.copy(o),n.set(r.x,o.y,0),i.copy(r),c.set(o.x,r.y,0),s.unproject(this.camera),n.unproject(this.camera),i.unproject(this.camera),c.unproject(this.camera),u.copy(s).sub(a),d.copy(n).sub(a),y.copy(i).sub(a),u.normalize(),d.normalize(),y.normalize(),u.multiplyScalar(this.deep),d.multiplyScalar(this.deep),y.multiplyScalar(this.deep),u.add(a),d.add(a),y.add(a),(P=e.planes)[0].setFromCoplanarPoints(a,s,n),P[1].setFromCoplanarPoints(a,n,i),P[2].setFromCoplanarPoints(i,c,a),P[3].setFromCoplanarPoints(c,s,a),P[4].setFromCoplanarPoints(n,i,c),P[5].setFromCoplanarPoints(y,d,u),P[5].normal.multiplyScalar(-1);else if(this.camera.isOrthographicCamera){const o=Math.min(t.x,r.x),a=Math.max(t.y,r.y),u=Math.max(t.x,r.x),d=Math.min(t.y,r.y);var P;s.set(o,a,-1),n.set(u,a,-1),i.set(u,d,-1),c.set(o,d,-1),h.set(o,a,1),m.set(u,a,1),l.set(u,d,1),p.set(o,d,1),s.unproject(this.camera),n.unproject(this.camera),i.unproject(this.camera),c.unproject(this.camera),h.unproject(this.camera),m.unproject(this.camera),l.unproject(this.camera),p.unproject(this.camera),(P=e.planes)[0].setFromCoplanarPoints(s,h,m),P[1].setFromCoplanarPoints(n,m,l),P[2].setFromCoplanarPoints(l,p,c),P[3].setFromCoplanarPoints(p,h,s),P[4].setFromCoplanarPoints(n,i,c),P[5].setFromCoplanarPoints(l,m,h),P[5].normal.multiplyScalar(-1)}else console.error("THREE.SelectionBox: Unsupported camera type.")}searchChildInFrustum(t,e){if((e.isMesh||e.isLine||e.isPoints)&&void 0!==e.material&&(null===e.geometry.boundingSphere&&e.geometry.computeBoundingSphere(),r.copy(e.geometry.boundingSphere.center),r.applyMatrix4(e.matrixWorld),t.containsPoint(r)&&this.collection.push(e)),e.children.length>0)for(let r=0;r<e.children.length;r++)this.searchChildInFrustum(t,e.children[r])}}})();exports.SelectionBox=e;
