"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three");class s extends e.Group{constructor(s){super(),this.csm=s,this.displayFrustum=!0,this.displayPlanes=!0,this.displayShadowBounds=!0;const t=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(24),a=new e.BufferGeometry;a.setIndex(new e.BufferAttribute(t,1)),a.setAttribute("position",new e.BufferAttribute(i,3,!1));const o=new e.LineSegments(a,new e.LineBasicMaterial);this.add(o),this.frustumLines=o,this.cascadeLines=[],this.cascadePlanes=[],this.shadowLines=[]}updateVisibility(){const e=this.displayFrustum,s=this.displayPlanes,t=this.displayShadowBounds,i=this.frustumLines,a=this.cascadeLines,o=this.cascadePlanes,n=this.shadowLines;for(let i=0,r=a.length;i<r;i++){const r=a[i],c=o[i],h=n[i];r.visible=e,c.visible=e&&s,h.visible=t}i.visible=e}update(){const s=this.csm,t=s.camera,i=s.cascades,a=s.mainFrustum,o=s.frustums,n=s.lights,r=this.frustumLines.geometry.getAttribute("position"),c=this.cascadeLines,h=this.cascadePlanes,p=this.shadowLines;for(this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.updateMatrixWorld(!0);c.length>i;)this.remove(c.pop()),this.remove(h.pop()),this.remove(p.pop());for(;c.length<i;){const s=new e.Box3Helper(new e.Box3,16777215),t=new e.MeshBasicMaterial({transparent:!0,opacity:.1,depthWrite:!1,side:e.DoubleSide}),i=new e.Mesh(new e.PlaneGeometry,t),a=new e.Group,o=new e.Box3Helper(new e.Box3,16776960);a.add(o),this.add(s),this.add(i),this.add(a),c.push(s),h.push(i),p.push(a)}for(let e=0;e<i;e++){const s=o[e],t=n[e].shadow.camera,i=s.vertices.far,a=c[e],r=h[e],d=p[e],l=d.children[0];a.box.min.copy(i[2]),a.box.max.copy(i[0]),a.box.max.z+=1e-4,r.position.addVectors(i[0],i[2]),r.position.multiplyScalar(.5),r.scale.subVectors(i[0],i[2]),r.scale.z=1e-4,this.remove(d),d.position.copy(t.position),d.quaternion.copy(t.quaternion),d.scale.copy(t.scale),d.updateMatrixWorld(!0),this.attach(d),l.box.min.set(t.bottom,t.left,-t.far),l.box.max.set(t.top,t.right,-t.near)}const d=a.vertices.near,l=a.vertices.far;r.setXYZ(0,l[0].x,l[0].y,l[0].z),r.setXYZ(1,l[3].x,l[3].y,l[3].z),r.setXYZ(2,l[2].x,l[2].y,l[2].z),r.setXYZ(3,l[1].x,l[1].y,l[1].z),r.setXYZ(4,d[0].x,d[0].y,d[0].z),r.setXYZ(5,d[3].x,d[3].y,d[3].z),r.setXYZ(6,d[2].x,d[2].y,d[2].z),r.setXYZ(7,d[1].x,d[1].y,d[1].z),r.needsUpdate=!0}}exports.CSMHelper=s;
